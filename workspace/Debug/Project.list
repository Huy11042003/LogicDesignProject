
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002820  08002820  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002820  08002820  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002820  08002820  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000058  08002880  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002880  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008500  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b86  00000000  00000000  000285c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  0002a150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b2  00000000  00000000  0002ab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001704f  00000000  00000000  0002b322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c000  00000000  00000000  00042371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084661  00000000  00000000  0004e371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027dc  00000000  00000000  000d29d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d51b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	080027e4 	.word	0x080027e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	080027e4 	.word	0x080027e4

0800014c <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[BUTTONS_NUMBER] = {0,0,0};


int isButtonPressed(int i){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
//		HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
		button_flag[i] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0

}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000074 	.word	0x20000074

08000180 <subKeyProcess>:

void subKeyProcess(int i){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000074 	.word	0x20000074

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
for(int i=0; i<BUTTONS_NUMBER; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e089      	b.n	80002c0 <getKeyInput+0x120>
  KeyReg2[i] = KeyReg1[i];
 80001ac:	4a49      	ldr	r2, [pc, #292]	; (80002d4 <getKeyInput+0x134>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4948      	ldr	r1, [pc, #288]	; (80002d8 <getKeyInput+0x138>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg1[i] = KeyReg0[i];
 80001bc:	4a47      	ldr	r2, [pc, #284]	; (80002dc <getKeyInput+0x13c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4943      	ldr	r1, [pc, #268]	; (80002d4 <getKeyInput+0x134>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if(i == 0)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10f      	bne.n	80001f2 <getKeyInput+0x52>
	  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, buttonsArr[i]);
 80001d2:	4a43      	ldr	r2, [pc, #268]	; (80002e0 <getKeyInput+0x140>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001da:	b29b      	uxth	r3, r3
 80001dc:	4619      	mov	r1, r3
 80001de:	4841      	ldr	r0, [pc, #260]	; (80002e4 <getKeyInput+0x144>)
 80001e0:	f001 fab0 	bl	8001744 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a3c      	ldr	r2, [pc, #240]	; (80002dc <getKeyInput+0x13c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001f0:	e021      	b.n	8000236 <getKeyInput+0x96>
  else if(i ==1)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d10f      	bne.n	8000218 <getKeyInput+0x78>
	  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, buttonsArr[i]);
 80001f8:	4a39      	ldr	r2, [pc, #228]	; (80002e0 <getKeyInput+0x140>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000200:	b29b      	uxth	r3, r3
 8000202:	4619      	mov	r1, r3
 8000204:	4837      	ldr	r0, [pc, #220]	; (80002e4 <getKeyInput+0x144>)
 8000206:	f001 fa9d 	bl	8001744 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	4619      	mov	r1, r3
 800020e:	4a33      	ldr	r2, [pc, #204]	; (80002dc <getKeyInput+0x13c>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000216:	e00e      	b.n	8000236 <getKeyInput+0x96>
  else
	  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, buttonsArr[i]);
 8000218:	4a31      	ldr	r2, [pc, #196]	; (80002e0 <getKeyInput+0x140>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000220:	b29b      	uxth	r3, r3
 8000222:	4619      	mov	r1, r3
 8000224:	482f      	ldr	r0, [pc, #188]	; (80002e4 <getKeyInput+0x144>)
 8000226:	f001 fa8d 	bl	8001744 <HAL_GPIO_ReadPin>
 800022a:	4603      	mov	r3, r0
 800022c:	4619      	mov	r1, r3
 800022e:	4a2b      	ldr	r2, [pc, #172]	; (80002dc <getKeyInput+0x13c>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000236:	4a27      	ldr	r2, [pc, #156]	; (80002d4 <getKeyInput+0x134>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023e:	4927      	ldr	r1, [pc, #156]	; (80002dc <getKeyInput+0x13c>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000246:	429a      	cmp	r2, r3
 8000248:	d137      	bne.n	80002ba <getKeyInput+0x11a>
 800024a:	4a22      	ldr	r2, [pc, #136]	; (80002d4 <getKeyInput+0x134>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000252:	4921      	ldr	r1, [pc, #132]	; (80002d8 <getKeyInput+0x138>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025a:	429a      	cmp	r2, r3
 800025c:	d12d      	bne.n	80002ba <getKeyInput+0x11a>
    if (KeyReg2[i] != KeyReg3[i]){
 800025e:	4a1e      	ldr	r2, [pc, #120]	; (80002d8 <getKeyInput+0x138>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000266:	4920      	ldr	r1, [pc, #128]	; (80002e8 <getKeyInput+0x148>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026e:	429a      	cmp	r2, r3
 8000270:	d015      	beq.n	800029e <getKeyInput+0xfe>
      KeyReg3[i] = KeyReg2[i];
 8000272:	4a19      	ldr	r2, [pc, #100]	; (80002d8 <getKeyInput+0x138>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027a:	491b      	ldr	r1, [pc, #108]	; (80002e8 <getKeyInput+0x148>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (KeyReg3[i] == PRESSED_STATE){
 8000282:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <getKeyInput+0x148>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d115      	bne.n	80002ba <getKeyInput+0x11a>
        TimeOutForKeyPress = 500;
 800028e:	4b17      	ldr	r3, [pc, #92]	; (80002ec <getKeyInput+0x14c>)
 8000290:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000294:	601a      	str	r2, [r3, #0]
        subKeyProcess(i);
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f7ff ff72 	bl	8000180 <subKeyProcess>
 800029c:	e00d      	b.n	80002ba <getKeyInput+0x11a>
      }
    }else{
       TimeOutForKeyPress --;
 800029e:	4b13      	ldr	r3, [pc, #76]	; (80002ec <getKeyInput+0x14c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	3b01      	subs	r3, #1
 80002a4:	4a11      	ldr	r2, [pc, #68]	; (80002ec <getKeyInput+0x14c>)
 80002a6:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <getKeyInput+0x14c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d104      	bne.n	80002ba <getKeyInput+0x11a>
          KeyReg3[i] = NORMAL_STATE;
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <getKeyInput+0x148>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2101      	movs	r1, #1
 80002b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
for(int i=0; i<BUTTONS_NUMBER; i++){
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	3301      	adds	r3, #1
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	f77f af72 	ble.w	80001ac <getKeyInput+0xc>
        }
    }
  }
}
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000018 	.word	0x20000018
 80002d8:	20000024 	.word	0x20000024
 80002dc:	2000000c 	.word	0x2000000c
 80002e0:	20000000 	.word	0x20000000
 80002e4:	40010800 	.word	0x40010800
 80002e8:	20000030 	.word	0x20000030
 80002ec:	2000003c 	.word	0x2000003c

080002f0 <displayFirstLedCouple>:
 *      Author: ad
 */
#include "display_led.h"


void displayFirstLedCouple(enum LedState state_1){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
	switch(state_1){
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	d84b      	bhi.n	8000398 <displayFirstLedCouple+0xa8>
 8000300:	a201      	add	r2, pc, #4	; (adr r2, 8000308 <displayFirstLedCouple+0x18>)
 8000302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000306:	bf00      	nop
 8000308:	08000319 	.word	0x08000319
 800030c:	08000339 	.word	0x08000339
 8000310:	08000379 	.word	0x08000379
 8000314:	08000359 	.word	0x08000359
	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 8000318:	2200      	movs	r2, #0
 800031a:	2110      	movs	r1, #16
 800031c:	4821      	ldr	r0, [pc, #132]	; (80003a4 <displayFirstLedCouple+0xb4>)
 800031e:	f001 fa28 	bl	8001772 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0) ;
 8000322:	2200      	movs	r2, #0
 8000324:	2102      	movs	r1, #2
 8000326:	481f      	ldr	r0, [pc, #124]	; (80003a4 <displayFirstLedCouple+0xb4>)
 8000328:	f001 fa23 	bl	8001772 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0) ;
 800032c:	2200      	movs	r2, #0
 800032e:	2101      	movs	r1, #1
 8000330:	481c      	ldr	r0, [pc, #112]	; (80003a4 <displayFirstLedCouple+0xb4>)
 8000332:	f001 fa1e 	bl	8001772 <HAL_GPIO_WritePin>
			 break;
 8000336:	e030      	b.n	800039a <displayFirstLedCouple+0xaa>
	 case RED:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 8000338:	2200      	movs	r2, #0
 800033a:	2110      	movs	r1, #16
 800033c:	4819      	ldr	r0, [pc, #100]	; (80003a4 <displayFirstLedCouple+0xb4>)
 800033e:	f001 fa18 	bl	8001772 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0) ;
 8000342:	2200      	movs	r2, #0
 8000344:	2102      	movs	r1, #2
 8000346:	4817      	ldr	r0, [pc, #92]	; (80003a4 <displayFirstLedCouple+0xb4>)
 8000348:	f001 fa13 	bl	8001772 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 1) ;
 800034c:	2201      	movs	r2, #1
 800034e:	2101      	movs	r1, #1
 8000350:	4814      	ldr	r0, [pc, #80]	; (80003a4 <displayFirstLedCouple+0xb4>)
 8000352:	f001 fa0e 	bl	8001772 <HAL_GPIO_WritePin>
			 break;
 8000356:	e020      	b.n	800039a <displayFirstLedCouple+0xaa>
	 case YELLOW:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	4811      	ldr	r0, [pc, #68]	; (80003a4 <displayFirstLedCouple+0xb4>)
 800035e:	f001 fa08 	bl	8001772 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 1) ;
 8000362:	2201      	movs	r2, #1
 8000364:	2102      	movs	r1, #2
 8000366:	480f      	ldr	r0, [pc, #60]	; (80003a4 <displayFirstLedCouple+0xb4>)
 8000368:	f001 fa03 	bl	8001772 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0) ;
 800036c:	2200      	movs	r2, #0
 800036e:	2101      	movs	r1, #1
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <displayFirstLedCouple+0xb4>)
 8000372:	f001 f9fe 	bl	8001772 <HAL_GPIO_WritePin>
			 break;
 8000376:	e010      	b.n	800039a <displayFirstLedCouple+0xaa>
	 case GREEN:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 1) ;
 8000378:	2201      	movs	r2, #1
 800037a:	2110      	movs	r1, #16
 800037c:	4809      	ldr	r0, [pc, #36]	; (80003a4 <displayFirstLedCouple+0xb4>)
 800037e:	f001 f9f8 	bl	8001772 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0) ;
 8000382:	2200      	movs	r2, #0
 8000384:	2102      	movs	r1, #2
 8000386:	4807      	ldr	r0, [pc, #28]	; (80003a4 <displayFirstLedCouple+0xb4>)
 8000388:	f001 f9f3 	bl	8001772 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0) ;
 800038c:	2200      	movs	r2, #0
 800038e:	2101      	movs	r1, #1
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <displayFirstLedCouple+0xb4>)
 8000392:	f001 f9ee 	bl	8001772 <HAL_GPIO_WritePin>
			 break;
 8000396:	e000      	b.n	800039a <displayFirstLedCouple+0xaa>
	 default:
		 break;
 8000398:	bf00      	nop
	}
}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40010800 	.word	0x40010800

080003a8 <displaySecondLedCouple>:



void displaySecondLedCouple(enum LedState state_2){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
	switch(state_2){
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	d84b      	bhi.n	8000450 <displaySecondLedCouple+0xa8>
 80003b8:	a201      	add	r2, pc, #4	; (adr r2, 80003c0 <displaySecondLedCouple+0x18>)
 80003ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003be:	bf00      	nop
 80003c0:	080003d1 	.word	0x080003d1
 80003c4:	080003f1 	.word	0x080003f1
 80003c8:	08000431 	.word	0x08000431
 80003cc:	08000411 	.word	0x08000411
	 	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 80003d0:	2200      	movs	r2, #0
 80003d2:	2101      	movs	r1, #1
 80003d4:	4821      	ldr	r0, [pc, #132]	; (800045c <displaySecondLedCouple+0xb4>)
 80003d6:	f001 f9cc 	bl	8001772 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0) ;
 80003da:	2200      	movs	r2, #0
 80003dc:	2102      	movs	r1, #2
 80003de:	481f      	ldr	r0, [pc, #124]	; (800045c <displaySecondLedCouple+0xb4>)
 80003e0:	f001 f9c7 	bl	8001772 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0) ;
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	481d      	ldr	r0, [pc, #116]	; (8000460 <displaySecondLedCouple+0xb8>)
 80003ea:	f001 f9c2 	bl	8001772 <HAL_GPIO_WritePin>
			 break;
 80003ee:	e030      	b.n	8000452 <displaySecondLedCouple+0xaa>
		case RED:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 80003f0:	2200      	movs	r2, #0
 80003f2:	2101      	movs	r1, #1
 80003f4:	4819      	ldr	r0, [pc, #100]	; (800045c <displaySecondLedCouple+0xb4>)
 80003f6:	f001 f9bc 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0) ;
 80003fa:	2200      	movs	r2, #0
 80003fc:	2102      	movs	r1, #2
 80003fe:	4817      	ldr	r0, [pc, #92]	; (800045c <displaySecondLedCouple+0xb4>)
 8000400:	f001 f9b7 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 1) ;
 8000404:	2201      	movs	r2, #1
 8000406:	2101      	movs	r1, #1
 8000408:	4815      	ldr	r0, [pc, #84]	; (8000460 <displaySecondLedCouple+0xb8>)
 800040a:	f001 f9b2 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 800040e:	e020      	b.n	8000452 <displaySecondLedCouple+0xaa>
		case YELLOW:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	4811      	ldr	r0, [pc, #68]	; (800045c <displaySecondLedCouple+0xb4>)
 8000416:	f001 f9ac 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 1) ;
 800041a:	2201      	movs	r2, #1
 800041c:	2102      	movs	r1, #2
 800041e:	480f      	ldr	r0, [pc, #60]	; (800045c <displaySecondLedCouple+0xb4>)
 8000420:	f001 f9a7 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0) ;
 8000424:	2200      	movs	r2, #0
 8000426:	2101      	movs	r1, #1
 8000428:	480d      	ldr	r0, [pc, #52]	; (8000460 <displaySecondLedCouple+0xb8>)
 800042a:	f001 f9a2 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 800042e:	e010      	b.n	8000452 <displaySecondLedCouple+0xaa>
		case GREEN:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 1) ;
 8000430:	2201      	movs	r2, #1
 8000432:	2101      	movs	r1, #1
 8000434:	4809      	ldr	r0, [pc, #36]	; (800045c <displaySecondLedCouple+0xb4>)
 8000436:	f001 f99c 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0) ;
 800043a:	2200      	movs	r2, #0
 800043c:	2102      	movs	r1, #2
 800043e:	4807      	ldr	r0, [pc, #28]	; (800045c <displaySecondLedCouple+0xb4>)
 8000440:	f001 f997 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0) ;
 8000444:	2200      	movs	r2, #0
 8000446:	2101      	movs	r1, #1
 8000448:	4805      	ldr	r0, [pc, #20]	; (8000460 <displaySecondLedCouple+0xb8>)
 800044a:	f001 f992 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 800044e:	e000      	b.n	8000452 <displaySecondLedCouple+0xaa>
		default:
		  break;
 8000450:	bf00      	nop
   }
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40011000 	.word	0x40011000
 8000460:	40010c00 	.word	0x40010c00

08000464 <toggleLeds>:

void toggleLeds(enum LedState state){
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	switch(state){
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2b03      	cmp	r3, #3
 8000472:	d00e      	beq.n	8000492 <toggleLeds+0x2e>
 8000474:	2b03      	cmp	r3, #3
 8000476:	dc1e      	bgt.n	80004b6 <toggleLeds+0x52>
 8000478:	2b01      	cmp	r3, #1
 800047a:	d013      	beq.n	80004a4 <toggleLeds+0x40>
 800047c:	2b02      	cmp	r3, #2
 800047e:	d11a      	bne.n	80004b6 <toggleLeds+0x52>
	 case GREEN:
			 HAL_GPIO_TogglePin( GREEN1_GPIO_Port , GREEN1_Pin) ;
 8000480:	2110      	movs	r1, #16
 8000482:	480f      	ldr	r0, [pc, #60]	; (80004c0 <toggleLeds+0x5c>)
 8000484:	f001 f98d 	bl	80017a2 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( GREEN2_GPIO_Port , GREEN2_Pin) ;
 8000488:	2101      	movs	r1, #1
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <toggleLeds+0x60>)
 800048c:	f001 f989 	bl	80017a2 <HAL_GPIO_TogglePin>
			 break;
 8000490:	e012      	b.n	80004b8 <toggleLeds+0x54>
	 case YELLOW:
			 HAL_GPIO_TogglePin( YELLOW1_GPIO_Port , YELLOW1_Pin) ;
 8000492:	2102      	movs	r1, #2
 8000494:	480a      	ldr	r0, [pc, #40]	; (80004c0 <toggleLeds+0x5c>)
 8000496:	f001 f984 	bl	80017a2 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( YELLOW2_GPIO_Port , YELLOW2_Pin) ;
 800049a:	2102      	movs	r1, #2
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <toggleLeds+0x60>)
 800049e:	f001 f980 	bl	80017a2 <HAL_GPIO_TogglePin>
			 break;
 80004a2:	e009      	b.n	80004b8 <toggleLeds+0x54>
	 case RED:
			 HAL_GPIO_TogglePin( RED1_GPIO_Port , RED1_Pin) ;
 80004a4:	2101      	movs	r1, #1
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <toggleLeds+0x5c>)
 80004a8:	f001 f97b 	bl	80017a2 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( RED2_GPIO_Port , RED2_Pin) ;
 80004ac:	2101      	movs	r1, #1
 80004ae:	4806      	ldr	r0, [pc, #24]	; (80004c8 <toggleLeds+0x64>)
 80004b0:	f001 f977 	bl	80017a2 <HAL_GPIO_TogglePin>
			 break;
 80004b4:	e000      	b.n	80004b8 <toggleLeds+0x54>
	 default:
		 break;
 80004b6:	bf00      	nop
	}
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40010800 	.word	0x40010800
 80004c4:	40011000 	.word	0x40011000
 80004c8:	40010c00 	.word	0x40010c00

080004cc <displaySEG7>:


void displaySEG7(int num){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	switch(num){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b09      	cmp	r3, #9
 80004d8:	f200 81a8 	bhi.w	800082c <displaySEG7+0x360>
 80004dc:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <displaySEG7+0x18>)
 80004de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e2:	bf00      	nop
 80004e4:	0800050d 	.word	0x0800050d
 80004e8:	0800055d 	.word	0x0800055d
 80004ec:	080005ad 	.word	0x080005ad
 80004f0:	080005fd 	.word	0x080005fd
 80004f4:	0800064d 	.word	0x0800064d
 80004f8:	0800069d 	.word	0x0800069d
 80004fc:	080006ed 	.word	0x080006ed
 8000500:	0800073d 	.word	0x0800073d
 8000504:	0800078d 	.word	0x0800078d
 8000508:	080007dd 	.word	0x080007dd
		case 0:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 800050c:	2200      	movs	r2, #0
 800050e:	2108      	movs	r1, #8
 8000510:	48c9      	ldr	r0, [pc, #804]	; (8000838 <displaySEG7+0x36c>)
 8000512:	f001 f92e 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000516:	2200      	movs	r2, #0
 8000518:	2104      	movs	r1, #4
 800051a:	48c7      	ldr	r0, [pc, #796]	; (8000838 <displaySEG7+0x36c>)
 800051c:	f001 f929 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000526:	48c4      	ldr	r0, [pc, #784]	; (8000838 <displaySEG7+0x36c>)
 8000528:	f001 f923 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 800052c:	2200      	movs	r2, #0
 800052e:	2120      	movs	r1, #32
 8000530:	48c2      	ldr	r0, [pc, #776]	; (800083c <displaySEG7+0x370>)
 8000532:	f001 f91e 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053c:	48bf      	ldr	r0, [pc, #764]	; (800083c <displaySEG7+0x370>)
 800053e:	f001 f918 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	48bb      	ldr	r0, [pc, #748]	; (8000838 <displaySEG7+0x36c>)
 800054a:	f001 f912 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000554:	48b8      	ldr	r0, [pc, #736]	; (8000838 <displaySEG7+0x36c>)
 8000556:	f001 f90c 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 800055a:	e168      	b.n	800082e <displaySEG7+0x362>

		case 1:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 ) ;
 800055c:	2201      	movs	r2, #1
 800055e:	2108      	movs	r1, #8
 8000560:	48b5      	ldr	r0, [pc, #724]	; (8000838 <displaySEG7+0x36c>)
 8000562:	f001 f906 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000566:	2200      	movs	r2, #0
 8000568:	2104      	movs	r1, #4
 800056a:	48b3      	ldr	r0, [pc, #716]	; (8000838 <displaySEG7+0x36c>)
 800056c:	f001 f901 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000576:	48b0      	ldr	r0, [pc, #704]	; (8000838 <displaySEG7+0x36c>)
 8000578:	f001 f8fb 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 800057c:	2201      	movs	r2, #1
 800057e:	2120      	movs	r1, #32
 8000580:	48ae      	ldr	r0, [pc, #696]	; (800083c <displaySEG7+0x370>)
 8000582:	f001 f8f6 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058c:	48ab      	ldr	r0, [pc, #684]	; (800083c <displaySEG7+0x370>)
 800058e:	f001 f8f0 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000598:	48a7      	ldr	r0, [pc, #668]	; (8000838 <displaySEG7+0x36c>)
 800059a:	f001 f8ea 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a4:	48a4      	ldr	r0, [pc, #656]	; (8000838 <displaySEG7+0x36c>)
 80005a6:	f001 f8e4 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 80005aa:	e140      	b.n	800082e <displaySEG7+0x362>

		case 2:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80005ac:	2200      	movs	r2, #0
 80005ae:	2108      	movs	r1, #8
 80005b0:	48a1      	ldr	r0, [pc, #644]	; (8000838 <displaySEG7+0x36c>)
 80005b2:	f001 f8de 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80005b6:	2200      	movs	r2, #0
 80005b8:	2104      	movs	r1, #4
 80005ba:	489f      	ldr	r0, [pc, #636]	; (8000838 <displaySEG7+0x36c>)
 80005bc:	f001 f8d9 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 1 ) ;
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	489c      	ldr	r0, [pc, #624]	; (8000838 <displaySEG7+0x36c>)
 80005c8:	f001 f8d3 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80005cc:	2200      	movs	r2, #0
 80005ce:	2120      	movs	r1, #32
 80005d0:	489a      	ldr	r0, [pc, #616]	; (800083c <displaySEG7+0x370>)
 80005d2:	f001 f8ce 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005dc:	4897      	ldr	r0, [pc, #604]	; (800083c <displaySEG7+0x370>)
 80005de:	f001 f8c8 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	4893      	ldr	r0, [pc, #588]	; (8000838 <displaySEG7+0x36c>)
 80005ea:	f001 f8c2 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f4:	4890      	ldr	r0, [pc, #576]	; (8000838 <displaySEG7+0x36c>)
 80005f6:	f001 f8bc 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 80005fa:	e118      	b.n	800082e <displaySEG7+0x362>

		case 3:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80005fc:	2200      	movs	r2, #0
 80005fe:	2108      	movs	r1, #8
 8000600:	488d      	ldr	r0, [pc, #564]	; (8000838 <displaySEG7+0x36c>)
 8000602:	f001 f8b6 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000606:	2200      	movs	r2, #0
 8000608:	2104      	movs	r1, #4
 800060a:	488b      	ldr	r0, [pc, #556]	; (8000838 <displaySEG7+0x36c>)
 800060c:	f001 f8b1 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000616:	4888      	ldr	r0, [pc, #544]	; (8000838 <displaySEG7+0x36c>)
 8000618:	f001 f8ab 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 800061c:	2200      	movs	r2, #0
 800061e:	2120      	movs	r1, #32
 8000620:	4886      	ldr	r0, [pc, #536]	; (800083c <displaySEG7+0x370>)
 8000622:	f001 f8a6 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062c:	4883      	ldr	r0, [pc, #524]	; (800083c <displaySEG7+0x370>)
 800062e:	f001 f8a0 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000638:	487f      	ldr	r0, [pc, #508]	; (8000838 <displaySEG7+0x36c>)
 800063a:	f001 f89a 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000644:	487c      	ldr	r0, [pc, #496]	; (8000838 <displaySEG7+0x36c>)
 8000646:	f001 f894 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 800064a:	e0f0      	b.n	800082e <displaySEG7+0x362>

		case 4:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 ) ;
 800064c:	2201      	movs	r2, #1
 800064e:	2108      	movs	r1, #8
 8000650:	4879      	ldr	r0, [pc, #484]	; (8000838 <displaySEG7+0x36c>)
 8000652:	f001 f88e 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000656:	2200      	movs	r2, #0
 8000658:	2104      	movs	r1, #4
 800065a:	4877      	ldr	r0, [pc, #476]	; (8000838 <displaySEG7+0x36c>)
 800065c:	f001 f889 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000666:	4874      	ldr	r0, [pc, #464]	; (8000838 <displaySEG7+0x36c>)
 8000668:	f001 f883 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 800066c:	2201      	movs	r2, #1
 800066e:	2120      	movs	r1, #32
 8000670:	4872      	ldr	r0, [pc, #456]	; (800083c <displaySEG7+0x370>)
 8000672:	f001 f87e 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000676:	2201      	movs	r2, #1
 8000678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067c:	486f      	ldr	r0, [pc, #444]	; (800083c <displaySEG7+0x370>)
 800067e:	f001 f878 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000688:	486b      	ldr	r0, [pc, #428]	; (8000838 <displaySEG7+0x36c>)
 800068a:	f001 f872 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000694:	4868      	ldr	r0, [pc, #416]	; (8000838 <displaySEG7+0x36c>)
 8000696:	f001 f86c 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 800069a:	e0c8      	b.n	800082e <displaySEG7+0x362>

		case 5:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 800069c:	2200      	movs	r2, #0
 800069e:	2108      	movs	r1, #8
 80006a0:	4865      	ldr	r0, [pc, #404]	; (8000838 <displaySEG7+0x36c>)
 80006a2:	f001 f866 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 ) ;
 80006a6:	2201      	movs	r2, #1
 80006a8:	2104      	movs	r1, #4
 80006aa:	4863      	ldr	r0, [pc, #396]	; (8000838 <displaySEG7+0x36c>)
 80006ac:	f001 f861 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b6:	4860      	ldr	r0, [pc, #384]	; (8000838 <displaySEG7+0x36c>)
 80006b8:	f001 f85b 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80006bc:	2200      	movs	r2, #0
 80006be:	2120      	movs	r1, #32
 80006c0:	485e      	ldr	r0, [pc, #376]	; (800083c <displaySEG7+0x370>)
 80006c2:	f001 f856 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006cc:	485b      	ldr	r0, [pc, #364]	; (800083c <displaySEG7+0x370>)
 80006ce:	f001 f850 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d8:	4857      	ldr	r0, [pc, #348]	; (8000838 <displaySEG7+0x36c>)
 80006da:	f001 f84a 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e4:	4854      	ldr	r0, [pc, #336]	; (8000838 <displaySEG7+0x36c>)
 80006e6:	f001 f844 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 80006ea:	e0a0      	b.n	800082e <displaySEG7+0x362>

		case 6:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80006ec:	2200      	movs	r2, #0
 80006ee:	2108      	movs	r1, #8
 80006f0:	4851      	ldr	r0, [pc, #324]	; (8000838 <displaySEG7+0x36c>)
 80006f2:	f001 f83e 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 ) ;
 80006f6:	2201      	movs	r2, #1
 80006f8:	2104      	movs	r1, #4
 80006fa:	484f      	ldr	r0, [pc, #316]	; (8000838 <displaySEG7+0x36c>)
 80006fc:	f001 f839 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000706:	484c      	ldr	r0, [pc, #304]	; (8000838 <displaySEG7+0x36c>)
 8000708:	f001 f833 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 800070c:	2200      	movs	r2, #0
 800070e:	2120      	movs	r1, #32
 8000710:	484a      	ldr	r0, [pc, #296]	; (800083c <displaySEG7+0x370>)
 8000712:	f001 f82e 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071c:	4847      	ldr	r0, [pc, #284]	; (800083c <displaySEG7+0x370>)
 800071e:	f001 f828 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000728:	4843      	ldr	r0, [pc, #268]	; (8000838 <displaySEG7+0x36c>)
 800072a:	f001 f822 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000734:	4840      	ldr	r0, [pc, #256]	; (8000838 <displaySEG7+0x36c>)
 8000736:	f001 f81c 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 800073a:	e078      	b.n	800082e <displaySEG7+0x362>

		case 7:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 800073c:	2200      	movs	r2, #0
 800073e:	2108      	movs	r1, #8
 8000740:	483d      	ldr	r0, [pc, #244]	; (8000838 <displaySEG7+0x36c>)
 8000742:	f001 f816 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000746:	2200      	movs	r2, #0
 8000748:	2104      	movs	r1, #4
 800074a:	483b      	ldr	r0, [pc, #236]	; (8000838 <displaySEG7+0x36c>)
 800074c:	f001 f811 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000756:	4838      	ldr	r0, [pc, #224]	; (8000838 <displaySEG7+0x36c>)
 8000758:	f001 f80b 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 800075c:	2201      	movs	r2, #1
 800075e:	2120      	movs	r1, #32
 8000760:	4836      	ldr	r0, [pc, #216]	; (800083c <displaySEG7+0x370>)
 8000762:	f001 f806 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076c:	4833      	ldr	r0, [pc, #204]	; (800083c <displaySEG7+0x370>)
 800076e:	f001 f800 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000778:	482f      	ldr	r0, [pc, #188]	; (8000838 <displaySEG7+0x36c>)
 800077a:	f000 fffa 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000784:	482c      	ldr	r0, [pc, #176]	; (8000838 <displaySEG7+0x36c>)
 8000786:	f000 fff4 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 800078a:	e050      	b.n	800082e <displaySEG7+0x362>

		case 8:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 800078c:	2200      	movs	r2, #0
 800078e:	2108      	movs	r1, #8
 8000790:	4829      	ldr	r0, [pc, #164]	; (8000838 <displaySEG7+0x36c>)
 8000792:	f000 ffee 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000796:	2200      	movs	r2, #0
 8000798:	2104      	movs	r1, #4
 800079a:	4827      	ldr	r0, [pc, #156]	; (8000838 <displaySEG7+0x36c>)
 800079c:	f000 ffe9 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a6:	4824      	ldr	r0, [pc, #144]	; (8000838 <displaySEG7+0x36c>)
 80007a8:	f000 ffe3 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80007ac:	2200      	movs	r2, #0
 80007ae:	2120      	movs	r1, #32
 80007b0:	4822      	ldr	r0, [pc, #136]	; (800083c <displaySEG7+0x370>)
 80007b2:	f000 ffde 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007bc:	481f      	ldr	r0, [pc, #124]	; (800083c <displaySEG7+0x370>)
 80007be:	f000 ffd8 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c8:	481b      	ldr	r0, [pc, #108]	; (8000838 <displaySEG7+0x36c>)
 80007ca:	f000 ffd2 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <displaySEG7+0x36c>)
 80007d6:	f000 ffcc 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 80007da:	e028      	b.n	800082e <displaySEG7+0x362>

		case 9:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80007dc:	2200      	movs	r2, #0
 80007de:	2108      	movs	r1, #8
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <displaySEG7+0x36c>)
 80007e2:	f000 ffc6 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80007e6:	2200      	movs	r2, #0
 80007e8:	2104      	movs	r1, #4
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <displaySEG7+0x36c>)
 80007ec:	f000 ffc1 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f6:	4810      	ldr	r0, [pc, #64]	; (8000838 <displaySEG7+0x36c>)
 80007f8:	f000 ffbb 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80007fc:	2200      	movs	r2, #0
 80007fe:	2120      	movs	r1, #32
 8000800:	480e      	ldr	r0, [pc, #56]	; (800083c <displaySEG7+0x370>)
 8000802:	f000 ffb6 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <displaySEG7+0x370>)
 800080e:	f000 ffb0 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <displaySEG7+0x36c>)
 800081a:	f000 ffaa 	bl	8001772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <displaySEG7+0x36c>)
 8000826:	f000 ffa4 	bl	8001772 <HAL_GPIO_WritePin>
			break;
 800082a:	e000      	b.n	800082e <displaySEG7+0x362>


		default:
			break;
 800082c:	bf00      	nop
  }
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40010800 	.word	0x40010800
 800083c:	40010c00 	.word	0x40010c00

08000840 <auto_run>:
 *      Author: ad
 */
#include "fsm_auto.h"


void auto_run(){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	if(MODE == MODE1){
 8000844:	4b95      	ldr	r3, [pc, #596]	; (8000a9c <auto_run+0x25c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	f040 8124 	bne.w	8000a96 <auto_run+0x256>
			switch(autostate){
 800084e:	4b94      	ldr	r3, [pc, #592]	; (8000aa0 <auto_run+0x260>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b04      	cmp	r3, #4
 8000854:	f200 811f 	bhi.w	8000a96 <auto_run+0x256>
 8000858:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <auto_run+0x20>)
 800085a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085e:	bf00      	nop
 8000860:	08000875 	.word	0x08000875
 8000864:	08000885 	.word	0x08000885
 8000868:	08000903 	.word	0x08000903
 800086c:	08000989 	.word	0x08000989
 8000870:	08000a05 	.word	0x08000a05
				case AUTO_INIT:
					autostate = RED_GREEN;
 8000874:	4b8a      	ldr	r3, [pc, #552]	; (8000aa0 <auto_run+0x260>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
					setTimer(0, 100);
 800087a:	2164      	movs	r1, #100	; 0x64
 800087c:	2000      	movs	r0, #0
 800087e:	f000 fb89 	bl	8000f94 <setTimer>
					break;
 8000882:	e108      	b.n	8000a96 <auto_run+0x256>
				case RED_GREEN:
					if (isButtonPressed(0) == 1 ){
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff fc61 	bl	800014c <isButtonPressed>
 800088a:	4603      	mov	r3, r0
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10d      	bne.n	80008ac <auto_run+0x6c>
						MODE = MODE2;
 8000890:	4b82      	ldr	r3, [pc, #520]	; (8000a9c <auto_run+0x25c>)
 8000892:	2202      	movs	r2, #2
 8000894:	701a      	strb	r2, [r3, #0]
						displayFirstLedCouple(LED_INIT);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fd2a 	bl	80002f0 <displayFirstLedCouple>
						displaySecondLedCouple(LED_INIT);
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fd83 	bl	80003a8 <displaySecondLedCouple>
						setTimer(3, 25);
 80008a2:	2119      	movs	r1, #25
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 fb75 	bl	8000f94 <setTimer>
						break;
 80008aa:	e0f4      	b.n	8000a96 <auto_run+0x256>
					}
					displayFirstLedCouple(RED);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f7ff fd1f 	bl	80002f0 <displayFirstLedCouple>
					displaySecondLedCouple(GREEN);
 80008b2:	2002      	movs	r0, #2
 80008b4:	f7ff fd78 	bl	80003a8 <displaySecondLedCouple>
					displaySEG7(countdownFirstCoupleLed-1);
 80008b8:	4b7a      	ldr	r3, [pc, #488]	; (8000aa4 <auto_run+0x264>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3b01      	subs	r3, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fe04 	bl	80004cc <displaySEG7>
					if(timer_flag[0] == 1){
 80008c4:	4b78      	ldr	r3, [pc, #480]	; (8000aa8 <auto_run+0x268>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	f040 80dd 	bne.w	8000a88 <auto_run+0x248>
						countdownFirstCoupleLed--;
 80008ce:	4b75      	ldr	r3, [pc, #468]	; (8000aa4 <auto_run+0x264>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	4a73      	ldr	r2, [pc, #460]	; (8000aa4 <auto_run+0x264>)
 80008d6:	6013      	str	r3, [r2, #0]
						countdownSecondCoupleLed--;
 80008d8:	4b74      	ldr	r3, [pc, #464]	; (8000aac <auto_run+0x26c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3b01      	subs	r3, #1
 80008de:	4a73      	ldr	r2, [pc, #460]	; (8000aac <auto_run+0x26c>)
 80008e0:	6013      	str	r3, [r2, #0]
						if(countdownSecondCoupleLed == 0){
 80008e2:	4b72      	ldr	r3, [pc, #456]	; (8000aac <auto_run+0x26c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d106      	bne.n	80008f8 <auto_run+0xb8>
							countdownSecondCoupleLed = yellowDelay;
 80008ea:	4b71      	ldr	r3, [pc, #452]	; (8000ab0 <auto_run+0x270>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a6f      	ldr	r2, [pc, #444]	; (8000aac <auto_run+0x26c>)
 80008f0:	6013      	str	r3, [r2, #0]
							autostate = RED_YELLOW;
 80008f2:	4b6b      	ldr	r3, [pc, #428]	; (8000aa0 <auto_run+0x260>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	701a      	strb	r2, [r3, #0]
						}
						setTimer(0, 100);
 80008f8:	2164      	movs	r1, #100	; 0x64
 80008fa:	2000      	movs	r0, #0
 80008fc:	f000 fb4a 	bl	8000f94 <setTimer>
					}
					break;
 8000900:	e0c2      	b.n	8000a88 <auto_run+0x248>
				case RED_YELLOW:
					if (isButtonPressed(0) == 1 ){
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fc22 	bl	800014c <isButtonPressed>
 8000908:	4603      	mov	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d10d      	bne.n	800092a <auto_run+0xea>
						MODE = MODE2;
 800090e:	4b63      	ldr	r3, [pc, #396]	; (8000a9c <auto_run+0x25c>)
 8000910:	2202      	movs	r2, #2
 8000912:	701a      	strb	r2, [r3, #0]
						displayFirstLedCouple(LED_INIT);
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff fceb 	bl	80002f0 <displayFirstLedCouple>
						displaySecondLedCouple(LED_INIT);
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fd44 	bl	80003a8 <displaySecondLedCouple>
						setTimer(3, 25);
 8000920:	2119      	movs	r1, #25
 8000922:	2003      	movs	r0, #3
 8000924:	f000 fb36 	bl	8000f94 <setTimer>
						break;
 8000928:	e0b5      	b.n	8000a96 <auto_run+0x256>
					}
					displayFirstLedCouple(RED);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff fce0 	bl	80002f0 <displayFirstLedCouple>
					displaySecondLedCouple(YELLOW);
 8000930:	2003      	movs	r0, #3
 8000932:	f7ff fd39 	bl	80003a8 <displaySecondLedCouple>
					displaySEG7(countdownFirstCoupleLed-1);
 8000936:	4b5b      	ldr	r3, [pc, #364]	; (8000aa4 <auto_run+0x264>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3b01      	subs	r3, #1
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fdc5 	bl	80004cc <displaySEG7>
					if(timer_flag[0] == 1){
 8000942:	4b59      	ldr	r3, [pc, #356]	; (8000aa8 <auto_run+0x268>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	f040 80a0 	bne.w	8000a8c <auto_run+0x24c>
						countdownFirstCoupleLed--;
 800094c:	4b55      	ldr	r3, [pc, #340]	; (8000aa4 <auto_run+0x264>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	3b01      	subs	r3, #1
 8000952:	4a54      	ldr	r2, [pc, #336]	; (8000aa4 <auto_run+0x264>)
 8000954:	6013      	str	r3, [r2, #0]
						countdownSecondCoupleLed--;
 8000956:	4b55      	ldr	r3, [pc, #340]	; (8000aac <auto_run+0x26c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3b01      	subs	r3, #1
 800095c:	4a53      	ldr	r2, [pc, #332]	; (8000aac <auto_run+0x26c>)
 800095e:	6013      	str	r3, [r2, #0]
						if(countdownSecondCoupleLed == 0){
 8000960:	4b52      	ldr	r3, [pc, #328]	; (8000aac <auto_run+0x26c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10a      	bne.n	800097e <auto_run+0x13e>
							countdownSecondCoupleLed = redDelay;
 8000968:	4b52      	ldr	r3, [pc, #328]	; (8000ab4 <auto_run+0x274>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a4f      	ldr	r2, [pc, #316]	; (8000aac <auto_run+0x26c>)
 800096e:	6013      	str	r3, [r2, #0]
							countdownFirstCoupleLed = greenDelay;
 8000970:	4b51      	ldr	r3, [pc, #324]	; (8000ab8 <auto_run+0x278>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a4b      	ldr	r2, [pc, #300]	; (8000aa4 <auto_run+0x264>)
 8000976:	6013      	str	r3, [r2, #0]
							autostate = GREEN_RED;
 8000978:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <auto_run+0x260>)
 800097a:	2203      	movs	r2, #3
 800097c:	701a      	strb	r2, [r3, #0]
						}
						setTimer(0, 100);
 800097e:	2164      	movs	r1, #100	; 0x64
 8000980:	2000      	movs	r0, #0
 8000982:	f000 fb07 	bl	8000f94 <setTimer>
					}
					break;
 8000986:	e081      	b.n	8000a8c <auto_run+0x24c>
				case GREEN_RED:
					if (isButtonPressed(0) == 1 ){
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fbdf 	bl	800014c <isButtonPressed>
 800098e:	4603      	mov	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d10d      	bne.n	80009b0 <auto_run+0x170>
						MODE = MODE2;
 8000994:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <auto_run+0x25c>)
 8000996:	2202      	movs	r2, #2
 8000998:	701a      	strb	r2, [r3, #0]
						displayFirstLedCouple(LED_INIT);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fca8 	bl	80002f0 <displayFirstLedCouple>
						displaySecondLedCouple(LED_INIT);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff fd01 	bl	80003a8 <displaySecondLedCouple>
						setTimer(3, 25);
 80009a6:	2119      	movs	r1, #25
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 faf3 	bl	8000f94 <setTimer>
						break;
 80009ae:	e072      	b.n	8000a96 <auto_run+0x256>
					}
					displayFirstLedCouple(GREEN);
 80009b0:	2002      	movs	r0, #2
 80009b2:	f7ff fc9d 	bl	80002f0 <displayFirstLedCouple>
					displaySecondLedCouple(RED);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff fcf6 	bl	80003a8 <displaySecondLedCouple>
					displaySEG7(countdownFirstCoupleLed-1);
 80009bc:	4b39      	ldr	r3, [pc, #228]	; (8000aa4 <auto_run+0x264>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3b01      	subs	r3, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fd82 	bl	80004cc <displaySEG7>
					if(timer_flag[0] == 1){
 80009c8:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <auto_run+0x268>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d15f      	bne.n	8000a90 <auto_run+0x250>
						countdownFirstCoupleLed--;
 80009d0:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <auto_run+0x264>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	4a33      	ldr	r2, [pc, #204]	; (8000aa4 <auto_run+0x264>)
 80009d8:	6013      	str	r3, [r2, #0]
						countdownSecondCoupleLed--;
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <auto_run+0x26c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3b01      	subs	r3, #1
 80009e0:	4a32      	ldr	r2, [pc, #200]	; (8000aac <auto_run+0x26c>)
 80009e2:	6013      	str	r3, [r2, #0]
						if(countdownFirstCoupleLed == 0){
 80009e4:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <auto_run+0x264>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d106      	bne.n	80009fa <auto_run+0x1ba>
							countdownFirstCoupleLed = yellowDelay;
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <auto_run+0x270>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a2c      	ldr	r2, [pc, #176]	; (8000aa4 <auto_run+0x264>)
 80009f2:	6013      	str	r3, [r2, #0]
							autostate = YELLOW_RED;
 80009f4:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <auto_run+0x260>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	701a      	strb	r2, [r3, #0]
						}
						setTimer(0, 100);
 80009fa:	2164      	movs	r1, #100	; 0x64
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 fac9 	bl	8000f94 <setTimer>
					}
					break;
 8000a02:	e045      	b.n	8000a90 <auto_run+0x250>
				case YELLOW_RED:
					if (isButtonPressed(0) == 1 ){
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff fba1 	bl	800014c <isButtonPressed>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d10d      	bne.n	8000a2c <auto_run+0x1ec>
						MODE = MODE2;
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <auto_run+0x25c>)
 8000a12:	2202      	movs	r2, #2
 8000a14:	701a      	strb	r2, [r3, #0]
						displayFirstLedCouple(LED_INIT);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff fc6a 	bl	80002f0 <displayFirstLedCouple>
						displaySecondLedCouple(LED_INIT);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fcc3 	bl	80003a8 <displaySecondLedCouple>
						setTimer(3, 25);
 8000a22:	2119      	movs	r1, #25
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 fab5 	bl	8000f94 <setTimer>
						break;
 8000a2a:	e034      	b.n	8000a96 <auto_run+0x256>
					}
					displayFirstLedCouple(YELLOW);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f7ff fc5f 	bl	80002f0 <displayFirstLedCouple>
					displaySecondLedCouple(RED);
 8000a32:	2001      	movs	r0, #1
 8000a34:	f7ff fcb8 	bl	80003a8 <displaySecondLedCouple>
					displaySEG7(countdownFirstCoupleLed-1);
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <auto_run+0x264>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fd44 	bl	80004cc <displaySEG7>
					if(timer_flag[0] == 1){
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <auto_run+0x268>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d123      	bne.n	8000a94 <auto_run+0x254>
						countdownFirstCoupleLed--;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <auto_run+0x264>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <auto_run+0x264>)
 8000a54:	6013      	str	r3, [r2, #0]
						countdownSecondCoupleLed--;
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <auto_run+0x26c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	4a13      	ldr	r2, [pc, #76]	; (8000aac <auto_run+0x26c>)
 8000a5e:	6013      	str	r3, [r2, #0]
						if(countdownFirstCoupleLed == 0){
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <auto_run+0x264>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d10a      	bne.n	8000a7e <auto_run+0x23e>
							countdownSecondCoupleLed = greenDelay;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <auto_run+0x278>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <auto_run+0x26c>)
 8000a6e:	6013      	str	r3, [r2, #0]
							countdownFirstCoupleLed = redDelay;
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <auto_run+0x274>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <auto_run+0x264>)
 8000a76:	6013      	str	r3, [r2, #0]
							autostate = RED_GREEN;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <auto_run+0x260>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
						}
						setTimer(0, 100);
 8000a7e:	2164      	movs	r1, #100	; 0x64
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 fa87 	bl	8000f94 <setTimer>
					}
					break;
 8000a86:	e005      	b.n	8000a94 <auto_run+0x254>
					break;
 8000a88:	bf00      	nop
 8000a8a:	e004      	b.n	8000a96 <auto_run+0x256>
					break;
 8000a8c:	bf00      	nop
 8000a8e:	e002      	b.n	8000a96 <auto_run+0x256>
					break;
 8000a90:	bf00      	nop
 8000a92:	e000      	b.n	8000a96 <auto_run+0x256>
					break;
 8000a94:	bf00      	nop
			}
	}
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000080 	.word	0x20000080
 8000aa0:	20000081 	.word	0x20000081
 8000aa4:	20000084 	.word	0x20000084
 8000aa8:	200000fc 	.word	0x200000fc
 8000aac:	20000088 	.word	0x20000088
 8000ab0:	20000048 	.word	0x20000048
 8000ab4:	20000040 	.word	0x20000040
 8000ab8:	20000044 	.word	0x20000044

08000abc <manual_run>:
 *      Author: ad
 */

#include "fsm_manual.h"

void manual_run(){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	switch(MODE){
 8000ac0:	4b74      	ldr	r3, [pc, #464]	; (8000c94 <manual_run+0x1d8>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	f000 8097 	beq.w	8000bf8 <manual_run+0x13c>
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	f300 80d9 	bgt.w	8000c82 <manual_run+0x1c6>
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d002      	beq.n	8000ada <manual_run+0x1e>
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d048      	beq.n	8000b6a <manual_run+0xae>
				displayFirstLedCouple(LED_INIT);
				displaySecondLedCouple(LED_INIT);
			}
			break;
		default:
			break;
 8000ad8:	e0d3      	b.n	8000c82 <manual_run+0x1c6>
			if(timer_flag[3] == 1){
 8000ada:	4b6f      	ldr	r3, [pc, #444]	; (8000c98 <manual_run+0x1dc>)
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d10c      	bne.n	8000afc <manual_run+0x40>
				toggleLeds(RED);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff fcbe 	bl	8000464 <toggleLeds>
				displaySEG7(redDelay-1);
 8000ae8:	4b6c      	ldr	r3, [pc, #432]	; (8000c9c <manual_run+0x1e0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fcec 	bl	80004cc <displaySEG7>
				setTimer(3, 25);
 8000af4:	2119      	movs	r1, #25
 8000af6:	2003      	movs	r0, #3
 8000af8:	f000 fa4c 	bl	8000f94 <setTimer>
			if (isButtonPressed(1)==1){
 8000afc:	2001      	movs	r0, #1
 8000afe:	f7ff fb25 	bl	800014c <isButtonPressed>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d110      	bne.n	8000b2a <manual_run+0x6e>
				redDelay +=1;
 8000b08:	4b64      	ldr	r3, [pc, #400]	; (8000c9c <manual_run+0x1e0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	4a63      	ldr	r2, [pc, #396]	; (8000c9c <manual_run+0x1e0>)
 8000b10:	6013      	str	r3, [r2, #0]
				greenDelay +=1;
 8000b12:	4b63      	ldr	r3, [pc, #396]	; (8000ca0 <manual_run+0x1e4>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	4a61      	ldr	r2, [pc, #388]	; (8000ca0 <manual_run+0x1e4>)
 8000b1a:	6013      	str	r3, [r2, #0]
				if(redDelay >= 99) redDelay = 1;
 8000b1c:	4b5f      	ldr	r3, [pc, #380]	; (8000c9c <manual_run+0x1e0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b62      	cmp	r3, #98	; 0x62
 8000b22:	dd02      	ble.n	8000b2a <manual_run+0x6e>
 8000b24:	4b5d      	ldr	r3, [pc, #372]	; (8000c9c <manual_run+0x1e0>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(2)==1){
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f7ff fb0e 	bl	800014c <isButtonPressed>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d104      	bne.n	8000b40 <manual_run+0x84>
				MODE = MODE1;
 8000b36:	4b57      	ldr	r3, [pc, #348]	; (8000c94 <manual_run+0x1d8>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
				setValues();
 8000b3c:	f000 f8b4 	bl	8000ca8 <setValues>
			if (isButtonPressed(0) == 1){
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fb03 	bl	800014c <isButtonPressed>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	f040 809c 	bne.w	8000c86 <manual_run+0x1ca>
				setTimer(3, 25);
 8000b4e:	2119      	movs	r1, #25
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 fa1f 	bl	8000f94 <setTimer>
				MODE = MODE3;
 8000b56:	4b4f      	ldr	r3, [pc, #316]	; (8000c94 <manual_run+0x1d8>)
 8000b58:	2203      	movs	r2, #3
 8000b5a:	701a      	strb	r2, [r3, #0]
				displayFirstLedCouple(LED_INIT);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff fbc7 	bl	80002f0 <displayFirstLedCouple>
				displaySecondLedCouple(LED_INIT);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff fc20 	bl	80003a8 <displaySecondLedCouple>
			break;
 8000b68:	e08d      	b.n	8000c86 <manual_run+0x1ca>
			if(timer_flag[3] == 1){
 8000b6a:	4b4b      	ldr	r3, [pc, #300]	; (8000c98 <manual_run+0x1dc>)
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d10c      	bne.n	8000b8c <manual_run+0xd0>
				toggleLeds(YELLOW);
 8000b72:	2003      	movs	r0, #3
 8000b74:	f7ff fc76 	bl	8000464 <toggleLeds>
				displaySEG7(yellowDelay-1);
 8000b78:	4b4a      	ldr	r3, [pc, #296]	; (8000ca4 <manual_run+0x1e8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fca4 	bl	80004cc <displaySEG7>
				setTimer(3, 25);
 8000b84:	2119      	movs	r1, #25
 8000b86:	2003      	movs	r0, #3
 8000b88:	f000 fa04 	bl	8000f94 <setTimer>
			if (isButtonPressed(1)==1){
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff fadd 	bl	800014c <isButtonPressed>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d110      	bne.n	8000bba <manual_run+0xfe>
				yellowDelay +=1;
 8000b98:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <manual_run+0x1e8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	4a41      	ldr	r2, [pc, #260]	; (8000ca4 <manual_run+0x1e8>)
 8000ba0:	6013      	str	r3, [r2, #0]
				redDelay+=1;
 8000ba2:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <manual_run+0x1e0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	4a3c      	ldr	r2, [pc, #240]	; (8000c9c <manual_run+0x1e0>)
 8000baa:	6013      	str	r3, [r2, #0]
				if(yellowDelay >= 99) yellowDelay = 1;
 8000bac:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <manual_run+0x1e8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b62      	cmp	r3, #98	; 0x62
 8000bb2:	dd02      	ble.n	8000bba <manual_run+0xfe>
 8000bb4:	4b3b      	ldr	r3, [pc, #236]	; (8000ca4 <manual_run+0x1e8>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(2)==1){
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f7ff fac6 	bl	800014c <isButtonPressed>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d104      	bne.n	8000bd0 <manual_run+0x114>
				MODE = MODE1;
 8000bc6:	4b33      	ldr	r3, [pc, #204]	; (8000c94 <manual_run+0x1d8>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
				setValues();
 8000bcc:	f000 f86c 	bl	8000ca8 <setValues>
			if (isButtonPressed(0) == 1){
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff fabb 	bl	800014c <isButtonPressed>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d156      	bne.n	8000c8a <manual_run+0x1ce>
				MODE = MODE4;
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <manual_run+0x1d8>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	701a      	strb	r2, [r3, #0]
				setTimer(3, 25);
 8000be2:	2119      	movs	r1, #25
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f9d5 	bl	8000f94 <setTimer>
				displayFirstLedCouple(LED_INIT);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff fb80 	bl	80002f0 <displayFirstLedCouple>
				displaySecondLedCouple(LED_INIT);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff fbd9 	bl	80003a8 <displaySecondLedCouple>
			break;
 8000bf6:	e048      	b.n	8000c8a <manual_run+0x1ce>
			if(timer_flag[3] == 1){
 8000bf8:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <manual_run+0x1dc>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d10c      	bne.n	8000c1a <manual_run+0x15e>
				toggleLeds(GREEN);
 8000c00:	2002      	movs	r0, #2
 8000c02:	f7ff fc2f 	bl	8000464 <toggleLeds>
				displaySEG7(greenDelay-1);
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <manual_run+0x1e4>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fc5d 	bl	80004cc <displaySEG7>
				setTimer(3, 25);
 8000c12:	2119      	movs	r1, #25
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f9bd 	bl	8000f94 <setTimer>
			if (isButtonPressed(1)==1){
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff fa96 	bl	800014c <isButtonPressed>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d110      	bne.n	8000c48 <manual_run+0x18c>
				redDelay +=1;
 8000c26:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <manual_run+0x1e0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <manual_run+0x1e0>)
 8000c2e:	6013      	str	r3, [r2, #0]
				greenDelay +=1;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <manual_run+0x1e4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <manual_run+0x1e4>)
 8000c38:	6013      	str	r3, [r2, #0]
				if(greenDelay >= 99) greenDelay = 1;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <manual_run+0x1e4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b62      	cmp	r3, #98	; 0x62
 8000c40:	dd02      	ble.n	8000c48 <manual_run+0x18c>
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <manual_run+0x1e4>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(2)==1){
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f7ff fa7f 	bl	800014c <isButtonPressed>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d104      	bne.n	8000c5e <manual_run+0x1a2>
				MODE = MODE1;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <manual_run+0x1d8>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
				setValues();
 8000c5a:	f000 f825 	bl	8000ca8 <setValues>
			if (isButtonPressed(0) == 1){
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fa74 	bl	800014c <isButtonPressed>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d111      	bne.n	8000c8e <manual_run+0x1d2>
				MODE = MODE1;
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <manual_run+0x1d8>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
				setValues();
 8000c70:	f000 f81a 	bl	8000ca8 <setValues>
				displayFirstLedCouple(LED_INIT);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fb3b 	bl	80002f0 <displayFirstLedCouple>
				displaySecondLedCouple(LED_INIT);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff fb94 	bl	80003a8 <displaySecondLedCouple>
			break;
 8000c80:	e005      	b.n	8000c8e <manual_run+0x1d2>
			break;
 8000c82:	bf00      	nop
 8000c84:	e004      	b.n	8000c90 <manual_run+0x1d4>
			break;
 8000c86:	bf00      	nop
 8000c88:	e002      	b.n	8000c90 <manual_run+0x1d4>
			break;
 8000c8a:	bf00      	nop
 8000c8c:	e000      	b.n	8000c90 <manual_run+0x1d4>
			break;
 8000c8e:	bf00      	nop
	}
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000080 	.word	0x20000080
 8000c98:	200000fc 	.word	0x200000fc
 8000c9c:	20000040 	.word	0x20000040
 8000ca0:	20000044 	.word	0x20000044
 8000ca4:	20000048 	.word	0x20000048

08000ca8 <setValues>:


int countdownFirstCoupleLed;
int countdownSecondCoupleLed;

void setValues(void){
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
	MODE = MODE1;
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <setValues+0x34>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
	autostate = AUTO_INIT;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <setValues+0x38>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]

	firstCoupleLedAutoState = LED_INIT;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <setValues+0x3c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
	secondCoupleLedAutoState = LED_INIT;
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <setValues+0x40>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]

	countdownFirstCoupleLed = redDelay;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <setValues+0x44>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <setValues+0x48>)
 8000cca:	6013      	str	r3, [r2, #0]
	countdownSecondCoupleLed = greenDelay;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <setValues+0x4c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <setValues+0x50>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	20000080 	.word	0x20000080
 8000ce0:	20000081 	.word	0x20000081
 8000ce4:	20000082 	.word	0x20000082
 8000ce8:	20000083 	.word	0x20000083
 8000cec:	20000040 	.word	0x20000040
 8000cf0:	20000084 	.word	0x20000084
 8000cf4:	20000044 	.word	0x20000044
 8000cf8:	20000088 	.word	0x20000088

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d00:	f000 fa2c 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d04:	f000 f814 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d08:	f000 f89a 	bl	8000e40 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d0c:	f000 f84c 	bl	8000da8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d10:	4806      	ldr	r0, [pc, #24]	; (8000d2c <main+0x30>)
 8000d12:	f001 f98d 	bl	8002030 <HAL_TIM_Base_Start_IT>
  setValues();
 8000d16:	f7ff ffc7 	bl	8000ca8 <setValues>
  displayFirstLedCouple(LED_INIT);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff fae8 	bl	80002f0 <displayFirstLedCouple>
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //A3
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0); //I2C
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9-D10
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); //LED2
//	  HAL_Delay(1000);
	  auto_run();
 8000d20:	f7ff fd8e 	bl	8000840 <auto_run>
	  manual_run();
 8000d24:	f7ff feca 	bl	8000abc <manual_run>
	  auto_run();
 8000d28:	e7fa      	b.n	8000d20 <main+0x24>
 8000d2a:	bf00      	nop
 8000d2c:	2000008c 	.word	0x2000008c

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b090      	sub	sp, #64	; 0x40
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	2228      	movs	r2, #40	; 0x28
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fd24 	bl	800278c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d62:	f107 0318 	add.w	r3, r7, #24
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fd34 	bl	80017d4 <HAL_RCC_OscConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d72:	f000 f909 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d76:	230f      	movs	r3, #15
 8000d78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 ffa2 	bl	8001cd8 <HAL_RCC_ClockConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d9a:	f000 f8f5 	bl	8000f88 <Error_Handler>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3740      	adds	r7, #64	; 0x40
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000ddc:	220a      	movs	r2, #10
 8000dde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dec:	4813      	ldr	r0, [pc, #76]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dee:	f001 f8cf 	bl	8001f90 <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000df8:	f000 f8c6 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	4619      	mov	r1, r3
 8000e08:	480c      	ldr	r0, [pc, #48]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000e0a:	f001 fa6b 	bl	80022e4 <HAL_TIM_ConfigClockSource>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e14:	f000 f8b8 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000e26:	f001 fc41 	bl	80026ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e30:	f000 f8aa 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000008c 	.word	0x2000008c

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <MX_GPIO_Init+0x10c>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a3c      	ldr	r2, [pc, #240]	; (8000f4c <MX_GPIO_Init+0x10c>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b3a      	ldr	r3, [pc, #232]	; (8000f4c <MX_GPIO_Init+0x10c>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <MX_GPIO_Init+0x10c>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a36      	ldr	r2, [pc, #216]	; (8000f4c <MX_GPIO_Init+0x10c>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <MX_GPIO_Init+0x10c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <MX_GPIO_Init+0x10c>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a30      	ldr	r2, [pc, #192]	; (8000f4c <MX_GPIO_Init+0x10c>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <MX_GPIO_Init+0x10c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GREEN2_Pin|YELLOW2_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2103      	movs	r1, #3
 8000ea0:	482b      	ldr	r0, [pc, #172]	; (8000f50 <MX_GPIO_Init+0x110>)
 8000ea2:	f000 fc66 	bl	8001772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2113      	movs	r1, #19
 8000eaa:	482a      	ldr	r0, [pc, #168]	; (8000f54 <MX_GPIO_Init+0x114>)
 8000eac:	f000 fc61 	bl	8001772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, B1_Pin|A1_Pin|F1_Pin|G1_Pin
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f240 710c 	movw	r1, #1804	; 0x70c
 8000eb6:	4827      	ldr	r0, [pc, #156]	; (8000f54 <MX_GPIO_Init+0x114>)
 8000eb8:	f000 fc5b 	bl	8001772 <HAL_GPIO_WritePin>
                          |C1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4825      	ldr	r0, [pc, #148]	; (8000f58 <MX_GPIO_Init+0x118>)
 8000ec2:	f000 fc56 	bl	8001772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E1_Pin|D1_Pin|LED9_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8000ecc:	4822      	ldr	r0, [pc, #136]	; (8000f58 <MX_GPIO_Init+0x118>)
 8000ece:	f000 fc50 	bl	8001772 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN2_Pin YELLOW2_Pin */
  GPIO_InitStruct.Pin = GREEN2_Pin|YELLOW2_Pin;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4819      	ldr	r0, [pc, #100]	; (8000f50 <MX_GPIO_Init+0x110>)
 8000eea:	f000 faa7 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin B1_Pin A1_Pin
                           GREEN1_Pin F1_Pin G1_Pin C1_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|B1_Pin|A1_Pin
 8000eee:	f240 731f 	movw	r3, #1823	; 0x71f
 8000ef2:	613b      	str	r3, [r7, #16]
                          |GREEN1_Pin|F1_Pin|G1_Pin|C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2302      	movs	r3, #2
 8000efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4619      	mov	r1, r3
 8000f06:	4813      	ldr	r0, [pc, #76]	; (8000f54 <MX_GPIO_Init+0x114>)
 8000f08:	f000 fa98 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000f0c:	23e0      	movs	r3, #224	; 0xe0
 8000f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480d      	ldr	r0, [pc, #52]	; (8000f54 <MX_GPIO_Init+0x114>)
 8000f20:	f000 fa8c 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED2_Pin E1_Pin D1_Pin LED9_Pin */
  GPIO_InitStruct.Pin = RED2_Pin|E1_Pin|D1_Pin|LED9_Pin;
 8000f24:	f240 4361 	movw	r3, #1121	; 0x461
 8000f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f107 0310 	add.w	r3, r7, #16
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <MX_GPIO_Init+0x118>)
 8000f3e:	f000 fa7d 	bl	800143c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40011000 	.word	0x40011000
 8000f54:	40010800 	.word	0x40010800
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8000f64:	f7ff f91c 	bl	80001a0 <getKeyInput>
	timerRun(0);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f000 f82b 	bl	8000fc4 <timerRun>
	timerRun(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f000 f828 	bl	8000fc4 <timerRun>
	timerRun(2);
 8000f74:	2002      	movs	r0, #2
 8000f76:	f000 f825 	bl	8000fc4 <timerRun>
	timerRun(3);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 f822 	bl	8000fc4 <timerRun>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int timer_ID, int duration){
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
	timer_counter[timer_ID] = duration;
 8000f9e:	4907      	ldr	r1, [pc, #28]	; (8000fbc <setTimer+0x28>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer_ID] = 0;
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <setTimer+0x2c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2100      	movs	r1, #0
 8000fae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	200000d4 	.word	0x200000d4
 8000fc0:	200000fc 	.word	0x200000fc

08000fc4 <timerRun>:
void timerRun(int timer_ID){
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	if(timer_counter[timer_ID] > 0){
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	; (800100c <timerRun+0x48>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	dd13      	ble.n	8001000 <timerRun+0x3c>
		timer_counter[timer_ID]--;
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <timerRun+0x48>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	490a      	ldr	r1, [pc, #40]	; (800100c <timerRun+0x48>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[timer_ID] <= 0){
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <timerRun+0x48>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	dc04      	bgt.n	8001000 <timerRun+0x3c>
			timer_flag[timer_ID] = 1;
 8000ff6:	4a06      	ldr	r2, [pc, #24]	; (8001010 <timerRun+0x4c>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200000d4 	.word	0x200000d4
 8001010:	200000fc 	.word	0x200000fc

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_MspInit+0x40>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <HAL_MspInit+0x40>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6193      	str	r3, [r2, #24]
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_MspInit+0x40>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_MspInit+0x40>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_MspInit+0x40>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_MspInit+0x40>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001068:	d113      	bne.n	8001092 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_TIM_Base_MspInit+0x44>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_TIM_Base_MspInit+0x44>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_TIM_Base_MspInit+0x44>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	201c      	movs	r0, #28
 8001088:	f000 f9a1 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800108c:	201c      	movs	r0, #28
 800108e:	f000 f9ba 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e6:	f000 f87f 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <TIM2_IRQHandler+0x10>)
 80010f6:	f000 ffed 	bl	80020d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000008c 	.word	0x2000008c

08001104 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001110:	f7ff fff8 	bl	8001104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001116:	490c      	ldr	r1, [pc, #48]	; (8001148 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001118:	4a0c      	ldr	r2, [pc, #48]	; (800114c <LoopFillZerobss+0x16>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800112c:	4c09      	ldr	r4, [pc, #36]	; (8001154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113a:	f001 fb2f 	bl	800279c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113e:	f7ff fddd 	bl	8000cfc <main>
  bx lr
 8001142:	4770      	bx	lr
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 800114c:	08002828 	.word	0x08002828
  ldr r2, =_sbss
 8001150:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001154:	20000128 	.word	0x20000128

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_Init+0x28>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x28>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f923 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	200f      	movs	r0, #15
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff ff4c 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f93b 	bl	8001422 <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f903 	bl	80013ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000004c 	.word	0x2000004c
 80011e0:	20000054 	.word	0x20000054
 80011e4:	20000050 	.word	0x20000050

080011e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_IncTick+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_IncTick+0x20>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a03      	ldr	r2, [pc, #12]	; (8001208 <HAL_IncTick+0x20>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	20000054 	.word	0x20000054
 8001208:	20000124 	.word	0x20000124

0800120c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <HAL_GetTick+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	20000124 	.word	0x20000124

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4906      	ldr	r1, [pc, #24]	; (80012b8 <__NVIC_EnableIRQ+0x34>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	; (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001384:	d301      	bcc.n	800138a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001386:	2301      	movs	r3, #1
 8001388:	e00f      	b.n	80013aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <SysTick_Config+0x40>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001392:	210f      	movs	r1, #15
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f7ff ff90 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <SysTick_Config+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SysTick_Config+0x40>)
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff2d 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff42 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ff90 	bl	8001310 <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff5f 	bl	80012bc <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff35 	bl	8001284 <__NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa2 	bl	8001374 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b08b      	sub	sp, #44	; 0x2c
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	e169      	b.n	8001724 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001450:	2201      	movs	r2, #1
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8158 	bne.w	800171e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a9a      	ldr	r2, [pc, #616]	; (80016dc <HAL_GPIO_Init+0x2a0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d05e      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001478:	4a98      	ldr	r2, [pc, #608]	; (80016dc <HAL_GPIO_Init+0x2a0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d875      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 800147e:	4a98      	ldr	r2, [pc, #608]	; (80016e0 <HAL_GPIO_Init+0x2a4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d058      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001484:	4a96      	ldr	r2, [pc, #600]	; (80016e0 <HAL_GPIO_Init+0x2a4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d86f      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 800148a:	4a96      	ldr	r2, [pc, #600]	; (80016e4 <HAL_GPIO_Init+0x2a8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d052      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001490:	4a94      	ldr	r2, [pc, #592]	; (80016e4 <HAL_GPIO_Init+0x2a8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d869      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 8001496:	4a94      	ldr	r2, [pc, #592]	; (80016e8 <HAL_GPIO_Init+0x2ac>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d04c      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 800149c:	4a92      	ldr	r2, [pc, #584]	; (80016e8 <HAL_GPIO_Init+0x2ac>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d863      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014a2:	4a92      	ldr	r2, [pc, #584]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d046      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 80014a8:	4a90      	ldr	r2, [pc, #576]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d85d      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014ae:	2b12      	cmp	r3, #18
 80014b0:	d82a      	bhi.n	8001508 <HAL_GPIO_Init+0xcc>
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d859      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014b6:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <HAL_GPIO_Init+0x80>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	08001537 	.word	0x08001537
 80014c0:	08001511 	.word	0x08001511
 80014c4:	08001523 	.word	0x08001523
 80014c8:	08001565 	.word	0x08001565
 80014cc:	0800156b 	.word	0x0800156b
 80014d0:	0800156b 	.word	0x0800156b
 80014d4:	0800156b 	.word	0x0800156b
 80014d8:	0800156b 	.word	0x0800156b
 80014dc:	0800156b 	.word	0x0800156b
 80014e0:	0800156b 	.word	0x0800156b
 80014e4:	0800156b 	.word	0x0800156b
 80014e8:	0800156b 	.word	0x0800156b
 80014ec:	0800156b 	.word	0x0800156b
 80014f0:	0800156b 	.word	0x0800156b
 80014f4:	0800156b 	.word	0x0800156b
 80014f8:	0800156b 	.word	0x0800156b
 80014fc:	0800156b 	.word	0x0800156b
 8001500:	08001519 	.word	0x08001519
 8001504:	0800152d 	.word	0x0800152d
 8001508:	4a79      	ldr	r2, [pc, #484]	; (80016f0 <HAL_GPIO_Init+0x2b4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d013      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800150e:	e02c      	b.n	800156a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e029      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	3304      	adds	r3, #4
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e024      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	3308      	adds	r3, #8
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e01f      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	330c      	adds	r3, #12
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e01a      	b.n	800156c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800153e:	2304      	movs	r3, #4
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e013      	b.n	800156c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d105      	bne.n	8001558 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800154c:	2308      	movs	r3, #8
 800154e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	611a      	str	r2, [r3, #16]
          break;
 8001556:	e009      	b.n	800156c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001558:	2308      	movs	r3, #8
 800155a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	615a      	str	r2, [r3, #20]
          break;
 8001562:	e003      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x130>
          break;
 800156a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2bff      	cmp	r3, #255	; 0xff
 8001570:	d801      	bhi.n	8001576 <HAL_GPIO_Init+0x13a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	e001      	b.n	800157a <HAL_GPIO_Init+0x13e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3304      	adds	r3, #4
 800157a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2bff      	cmp	r3, #255	; 0xff
 8001580:	d802      	bhi.n	8001588 <HAL_GPIO_Init+0x14c>
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	e002      	b.n	800158e <HAL_GPIO_Init+0x152>
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	3b08      	subs	r3, #8
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	210f      	movs	r1, #15
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	401a      	ands	r2, r3
 80015a0:	6a39      	ldr	r1, [r7, #32]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	431a      	orrs	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80b1 	beq.w	800171e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015bc:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <HAL_GPIO_Init+0x2b8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a4c      	ldr	r2, [pc, #304]	; (80016f4 <HAL_GPIO_Init+0x2b8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <HAL_GPIO_Init+0x2b8>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d4:	4a48      	ldr	r2, [pc, #288]	; (80016f8 <HAL_GPIO_Init+0x2bc>)
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	220f      	movs	r2, #15
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a40      	ldr	r2, [pc, #256]	; (80016fc <HAL_GPIO_Init+0x2c0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d013      	beq.n	8001628 <HAL_GPIO_Init+0x1ec>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3f      	ldr	r2, [pc, #252]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d00d      	beq.n	8001624 <HAL_GPIO_Init+0x1e8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3e      	ldr	r2, [pc, #248]	; (8001704 <HAL_GPIO_Init+0x2c8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d007      	beq.n	8001620 <HAL_GPIO_Init+0x1e4>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a3d      	ldr	r2, [pc, #244]	; (8001708 <HAL_GPIO_Init+0x2cc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d101      	bne.n	800161c <HAL_GPIO_Init+0x1e0>
 8001618:	2303      	movs	r3, #3
 800161a:	e006      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 800161c:	2304      	movs	r3, #4
 800161e:	e004      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001620:	2302      	movs	r3, #2
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001628:	2300      	movs	r3, #0
 800162a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162c:	f002 0203 	and.w	r2, r2, #3
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	4093      	lsls	r3, r2
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800163a:	492f      	ldr	r1, [pc, #188]	; (80016f8 <HAL_GPIO_Init+0x2bc>)
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	492c      	ldr	r1, [pc, #176]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	43db      	mvns	r3, r3
 800166a:	4928      	ldr	r1, [pc, #160]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800166c:	4013      	ands	r3, r2
 800166e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d006      	beq.n	800168a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800167c:	4b23      	ldr	r3, [pc, #140]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	4922      	ldr	r1, [pc, #136]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	60cb      	str	r3, [r1, #12]
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	43db      	mvns	r3, r3
 8001692:	491e      	ldr	r1, [pc, #120]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001694:	4013      	ands	r3, r2
 8001696:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4918      	ldr	r1, [pc, #96]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4914      	ldr	r1, [pc, #80]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d021      	beq.n	8001710 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	490e      	ldr	r1, [pc, #56]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
 80016d8:	e021      	b.n	800171e <HAL_GPIO_Init+0x2e2>
 80016da:	bf00      	nop
 80016dc:	10320000 	.word	0x10320000
 80016e0:	10310000 	.word	0x10310000
 80016e4:	10220000 	.word	0x10220000
 80016e8:	10210000 	.word	0x10210000
 80016ec:	10120000 	.word	0x10120000
 80016f0:	10110000 	.word	0x10110000
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010000 	.word	0x40010000
 80016fc:	40010800 	.word	0x40010800
 8001700:	40010c00 	.word	0x40010c00
 8001704:	40011000 	.word	0x40011000
 8001708:	40011400 	.word	0x40011400
 800170c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_GPIO_Init+0x304>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	43db      	mvns	r3, r3
 8001718:	4909      	ldr	r1, [pc, #36]	; (8001740 <HAL_GPIO_Init+0x304>)
 800171a:	4013      	ands	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	3301      	adds	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	f47f ae8e 	bne.w	8001450 <HAL_GPIO_Init+0x14>
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	372c      	adds	r7, #44	; 0x2c
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e001      	b.n	8001766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	807b      	strh	r3, [r7, #2]
 800177e:	4613      	mov	r3, r2
 8001780:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001782:	787b      	ldrb	r3, [r7, #1]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001788:	887a      	ldrh	r2, [r7, #2]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800178e:	e003      	b.n	8001798 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	041a      	lsls	r2, r3, #16
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	611a      	str	r2, [r3, #16]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b4:	887a      	ldrh	r2, [r7, #2]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4013      	ands	r3, r2
 80017ba:	041a      	lsls	r2, r3, #16
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	43d9      	mvns	r1, r3
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	400b      	ands	r3, r1
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	611a      	str	r2, [r3, #16]
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e272      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8087 	beq.w	8001902 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017f4:	4b92      	ldr	r3, [pc, #584]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d00c      	beq.n	800181a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001800:	4b8f      	ldr	r3, [pc, #572]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b08      	cmp	r3, #8
 800180a:	d112      	bne.n	8001832 <HAL_RCC_OscConfig+0x5e>
 800180c:	4b8c      	ldr	r3, [pc, #560]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001818:	d10b      	bne.n	8001832 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181a:	4b89      	ldr	r3, [pc, #548]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d06c      	beq.n	8001900 <HAL_RCC_OscConfig+0x12c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d168      	bne.n	8001900 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e24c      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x76>
 800183c:	4b80      	ldr	r3, [pc, #512]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a7f      	ldr	r2, [pc, #508]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e02e      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x98>
 8001852:	4b7b      	ldr	r3, [pc, #492]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a7a      	ldr	r2, [pc, #488]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b78      	ldr	r3, [pc, #480]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a77      	ldr	r2, [pc, #476]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e01d      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0xbc>
 8001876:	4b72      	ldr	r3, [pc, #456]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a71      	ldr	r2, [pc, #452]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b6f      	ldr	r3, [pc, #444]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a6e      	ldr	r2, [pc, #440]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 8001890:	4b6b      	ldr	r3, [pc, #428]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a6a      	ldr	r2, [pc, #424]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a67      	ldr	r2, [pc, #412]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fcac 	bl	800120c <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fca8 	bl	800120c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e200      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0xe4>
 80018d6:	e014      	b.n	8001902 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fc98 	bl	800120c <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fc94 	bl	800120c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1ec      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	4b53      	ldr	r3, [pc, #332]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x10c>
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d063      	beq.n	80019d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800190e:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800191a:	4b49      	ldr	r3, [pc, #292]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b08      	cmp	r3, #8
 8001924:	d11c      	bne.n	8001960 <HAL_RCC_OscConfig+0x18c>
 8001926:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d116      	bne.n	8001960 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x176>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e1c0      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194a:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4939      	ldr	r1, [pc, #228]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	e03a      	b.n	80019d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001968:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff fc4d 	bl	800120c <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001976:	f7ff fc49 	bl	800120c <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e1a1      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4927      	ldr	r1, [pc, #156]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
 80019a8:	e015      	b.n	80019d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fc2c 	bl	800120c <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff fc28 	bl	800120c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e180      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d03a      	beq.n	8001a58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d019      	beq.n	8001a1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_RCC_OscConfig+0x274>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fc0c 	bl	800120c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fc08 	bl	800120c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e160      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a16:	2001      	movs	r0, #1
 8001a18:	f000 fa9c 	bl	8001f54 <RCC_Delay>
 8001a1c:	e01c      	b.n	8001a58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a24:	f7ff fbf2 	bl	800120c <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2a:	e00f      	b.n	8001a4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fbee 	bl	800120c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d908      	bls.n	8001a4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e146      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	42420000 	.word	0x42420000
 8001a48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4c:	4b92      	ldr	r3, [pc, #584]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1e9      	bne.n	8001a2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80a6 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6a:	4b8b      	ldr	r3, [pc, #556]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10d      	bne.n	8001a92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	4a87      	ldr	r2, [pc, #540]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	61d3      	str	r3, [r2, #28]
 8001a82:	4b85      	ldr	r3, [pc, #532]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a92:	4b82      	ldr	r3, [pc, #520]	; (8001c9c <HAL_RCC_OscConfig+0x4c8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d118      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a9e:	4b7f      	ldr	r3, [pc, #508]	; (8001c9c <HAL_RCC_OscConfig+0x4c8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7e      	ldr	r2, [pc, #504]	; (8001c9c <HAL_RCC_OscConfig+0x4c8>)
 8001aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fbaf 	bl	800120c <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab2:	f7ff fbab 	bl	800120c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b64      	cmp	r3, #100	; 0x64
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e103      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	4b75      	ldr	r3, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x4c8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d106      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x312>
 8001ad8:	4b6f      	ldr	r3, [pc, #444]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4a6e      	ldr	r2, [pc, #440]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6213      	str	r3, [r2, #32]
 8001ae4:	e02d      	b.n	8001b42 <HAL_RCC_OscConfig+0x36e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x334>
 8001aee:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a69      	ldr	r2, [pc, #420]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6213      	str	r3, [r2, #32]
 8001afa:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4a66      	ldr	r2, [pc, #408]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	f023 0304 	bic.w	r3, r3, #4
 8001b04:	6213      	str	r3, [r2, #32]
 8001b06:	e01c      	b.n	8001b42 <HAL_RCC_OscConfig+0x36e>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	d10c      	bne.n	8001b2a <HAL_RCC_OscConfig+0x356>
 8001b10:	4b61      	ldr	r3, [pc, #388]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4a60      	ldr	r2, [pc, #384]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	6213      	str	r3, [r2, #32]
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6213      	str	r3, [r2, #32]
 8001b28:	e00b      	b.n	8001b42 <HAL_RCC_OscConfig+0x36e>
 8001b2a:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a5a      	ldr	r2, [pc, #360]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a57      	ldr	r2, [pc, #348]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d015      	beq.n	8001b76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fb5f 	bl	800120c <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff fb5b 	bl	800120c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e0b1      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	4b4b      	ldr	r3, [pc, #300]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0ee      	beq.n	8001b52 <HAL_RCC_OscConfig+0x37e>
 8001b74:	e014      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fb49 	bl	800120c <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fb45 	bl	800120c <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e09b      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b94:	4b40      	ldr	r3, [pc, #256]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1ee      	bne.n	8001b7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d105      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba6:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a3b      	ldr	r2, [pc, #236]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d061      	beq.n	8001c8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d146      	bne.n	8001c5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd0:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <HAL_RCC_OscConfig+0x4cc>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fb19 	bl	800120c <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff fb15 	bl	800120c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e06d      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f0      	bne.n	8001bde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c04:	d108      	bne.n	8001c18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	4921      	ldr	r1, [pc, #132]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a19      	ldr	r1, [r3, #32]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	491b      	ldr	r1, [pc, #108]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <HAL_RCC_OscConfig+0x4cc>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7ff fae9 	bl	800120c <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7ff fae5 	bl	800120c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e03d      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x46a>
 8001c5c:	e035      	b.n	8001cca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_RCC_OscConfig+0x4cc>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fad2 	bl	800120c <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff face 	bl	800120c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e026      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x498>
 8001c8a:	e01e      	b.n	8001cca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e019      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_OscConfig+0x500>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0d0      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cec:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d910      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b67      	ldr	r3, [pc, #412]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 0207 	bic.w	r2, r3, #7
 8001d02:	4965      	ldr	r1, [pc, #404]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b8      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d4c:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	494d      	ldr	r1, [pc, #308]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d040      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d115      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e07f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e073      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da6:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e06b      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4936      	ldr	r1, [pc, #216]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc8:	f7ff fa20 	bl	800120c <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff fa1c 	bl	800120c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e053      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	4b2d      	ldr	r3, [pc, #180]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 020c 	and.w	r2, r3, #12
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1eb      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d210      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4922      	ldr	r1, [pc, #136]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e032      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4916      	ldr	r1, [pc, #88]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	490e      	ldr	r1, [pc, #56]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e66:	f000 f821 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	490a      	ldr	r1, [pc, #40]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e78:	5ccb      	ldrb	r3, [r1, r3]
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8001e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f97e 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	080027fc 	.word	0x080027fc
 8001ea4:	2000004c 	.word	0x2000004c
 8001ea8:	20000050 	.word	0x20000050

08001eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d002      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x30>
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d003      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eda:	e027      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ede:	613b      	str	r3, [r7, #16]
      break;
 8001ee0:	e027      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	0c9b      	lsrs	r3, r3, #18
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eec:	5cd3      	ldrb	r3, [r2, r3]
 8001eee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d010      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	0c5b      	lsrs	r3, r3, #17
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0e:	fb03 f202 	mul.w	r2, r3, r2
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e004      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	613b      	str	r3, [r7, #16]
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2e:	613b      	str	r3, [r7, #16]
      break;
 8001f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f32:	693b      	ldr	r3, [r7, #16]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	007a1200 	.word	0x007a1200
 8001f48:	0800280c 	.word	0x0800280c
 8001f4c:	0800281c 	.word	0x0800281c
 8001f50:	003d0900 	.word	0x003d0900

08001f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <RCC_Delay+0x34>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <RCC_Delay+0x38>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0a5b      	lsrs	r3, r3, #9
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f70:	bf00      	nop
  }
  while (Delay --);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1e5a      	subs	r2, r3, #1
 8001f76:	60fa      	str	r2, [r7, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f9      	bne.n	8001f70 <RCC_Delay+0x1c>
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	2000004c 	.word	0x2000004c
 8001f8c:	10624dd3 	.word	0x10624dd3

08001f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e041      	b.n	8002026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff f84e 	bl	8001058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f000 fa74 	bl	80024bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d001      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e03a      	b.n	80020be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <HAL_TIM_Base_Start_IT+0x98>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00e      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x58>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002072:	d009      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x58>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <HAL_TIM_Base_Start_IT+0x9c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d004      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x58>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d010      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020aa:	e007      	b.n	80020bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	40012c00 	.word	0x40012c00
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40000800 	.word	0x40000800

080020d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d122      	bne.n	8002130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d11b      	bne.n	8002130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0202 	mvn.w	r2, #2
 8002100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f9b4 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 800211c:	e005      	b.n	800212a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f9a7 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f9b6 	bl	8002496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b04      	cmp	r3, #4
 800213c:	d122      	bne.n	8002184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b04      	cmp	r3, #4
 800214a:	d11b      	bne.n	8002184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0204 	mvn.w	r2, #4
 8002154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2202      	movs	r2, #2
 800215a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f98a 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 8002170:	e005      	b.n	800217e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f97d 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f98c 	bl	8002496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b08      	cmp	r3, #8
 8002190:	d122      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b08      	cmp	r3, #8
 800219e:	d11b      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0208 	mvn.w	r2, #8
 80021a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2204      	movs	r2, #4
 80021ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f960 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 80021c4:	e005      	b.n	80021d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f953 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f962 	bl	8002496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d122      	bne.n	800222c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b10      	cmp	r3, #16
 80021f2:	d11b      	bne.n	800222c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0210 	mvn.w	r2, #16
 80021fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2208      	movs	r2, #8
 8002202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f936 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 8002218:	e005      	b.n	8002226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f929 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f938 	bl	8002496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d10e      	bne.n	8002258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d107      	bne.n	8002258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0201 	mvn.w	r2, #1
 8002250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fe82 	bl	8000f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002262:	2b80      	cmp	r3, #128	; 0x80
 8002264:	d10e      	bne.n	8002284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002270:	2b80      	cmp	r3, #128	; 0x80
 8002272:	d107      	bne.n	8002284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800227c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fa7b 	bl	800277a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b40      	cmp	r3, #64	; 0x40
 8002290:	d10e      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d107      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f8fc 	bl	80024a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d10e      	bne.n	80022dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d107      	bne.n	80022dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0220 	mvn.w	r2, #32
 80022d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa46 	bl	8002768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_TIM_ConfigClockSource+0x1c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e0b4      	b.n	800246a <HAL_TIM_ConfigClockSource+0x186>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800231e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002326:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002338:	d03e      	beq.n	80023b8 <HAL_TIM_ConfigClockSource+0xd4>
 800233a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800233e:	f200 8087 	bhi.w	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002346:	f000 8086 	beq.w	8002456 <HAL_TIM_ConfigClockSource+0x172>
 800234a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234e:	d87f      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002350:	2b70      	cmp	r3, #112	; 0x70
 8002352:	d01a      	beq.n	800238a <HAL_TIM_ConfigClockSource+0xa6>
 8002354:	2b70      	cmp	r3, #112	; 0x70
 8002356:	d87b      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002358:	2b60      	cmp	r3, #96	; 0x60
 800235a:	d050      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x11a>
 800235c:	2b60      	cmp	r3, #96	; 0x60
 800235e:	d877      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002360:	2b50      	cmp	r3, #80	; 0x50
 8002362:	d03c      	beq.n	80023de <HAL_TIM_ConfigClockSource+0xfa>
 8002364:	2b50      	cmp	r3, #80	; 0x50
 8002366:	d873      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002368:	2b40      	cmp	r3, #64	; 0x40
 800236a:	d058      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x13a>
 800236c:	2b40      	cmp	r3, #64	; 0x40
 800236e:	d86f      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002370:	2b30      	cmp	r3, #48	; 0x30
 8002372:	d064      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x15a>
 8002374:	2b30      	cmp	r3, #48	; 0x30
 8002376:	d86b      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002378:	2b20      	cmp	r3, #32
 800237a:	d060      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x15a>
 800237c:	2b20      	cmp	r3, #32
 800237e:	d867      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002380:	2b00      	cmp	r3, #0
 8002382:	d05c      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x15a>
 8002384:	2b10      	cmp	r3, #16
 8002386:	d05a      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x15a>
 8002388:	e062      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800239a:	f000 f968 	bl	800266e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	609a      	str	r2, [r3, #8]
      break;
 80023b6:	e04f      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023c8:	f000 f951 	bl	800266e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023da:	609a      	str	r2, [r3, #8]
      break;
 80023dc:	e03c      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ea:	461a      	mov	r2, r3
 80023ec:	f000 f8c8 	bl	8002580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2150      	movs	r1, #80	; 0x50
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f91f 	bl	800263a <TIM_ITRx_SetConfig>
      break;
 80023fc:	e02c      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800240a:	461a      	mov	r2, r3
 800240c:	f000 f8e6 	bl	80025dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2160      	movs	r1, #96	; 0x60
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f90f 	bl	800263a <TIM_ITRx_SetConfig>
      break;
 800241c:	e01c      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800242a:	461a      	mov	r2, r3
 800242c:	f000 f8a8 	bl	8002580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2140      	movs	r1, #64	; 0x40
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f8ff 	bl	800263a <TIM_ITRx_SetConfig>
      break;
 800243c:	e00c      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f000 f8f6 	bl	800263a <TIM_ITRx_SetConfig>
      break;
 800244e:	e003      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      break;
 8002454:	e000      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
	...

080024bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a29      	ldr	r2, [pc, #164]	; (8002574 <TIM_Base_SetConfig+0xb8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00b      	beq.n	80024ec <TIM_Base_SetConfig+0x30>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024da:	d007      	beq.n	80024ec <TIM_Base_SetConfig+0x30>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a26      	ldr	r2, [pc, #152]	; (8002578 <TIM_Base_SetConfig+0xbc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d003      	beq.n	80024ec <TIM_Base_SetConfig+0x30>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a25      	ldr	r2, [pc, #148]	; (800257c <TIM_Base_SetConfig+0xc0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d108      	bne.n	80024fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <TIM_Base_SetConfig+0xb8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00b      	beq.n	800251e <TIM_Base_SetConfig+0x62>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250c:	d007      	beq.n	800251e <TIM_Base_SetConfig+0x62>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <TIM_Base_SetConfig+0xbc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <TIM_Base_SetConfig+0x62>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a18      	ldr	r2, [pc, #96]	; (800257c <TIM_Base_SetConfig+0xc0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d108      	bne.n	8002530 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a07      	ldr	r2, [pc, #28]	; (8002574 <TIM_Base_SetConfig+0xb8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d103      	bne.n	8002564 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	615a      	str	r2, [r3, #20]
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40000400 	.word	0x40000400
 800257c:	40000800 	.word	0x40000800

08002580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	f023 0201 	bic.w	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f023 030a 	bic.w	r3, r3, #10
 80025bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	621a      	str	r2, [r3, #32]
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	f023 0210 	bic.w	r2, r3, #16
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	031b      	lsls	r3, r3, #12
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002618:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	621a      	str	r2, [r3, #32]
}
 8002630:	bf00      	nop
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	f043 0307 	orr.w	r3, r3, #7
 800265c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	609a      	str	r2, [r3, #8]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800266e:	b480      	push	{r7}
 8002670:	b087      	sub	sp, #28
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002688:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	021a      	lsls	r2, r3, #8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	431a      	orrs	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	4313      	orrs	r3, r2
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	609a      	str	r2, [r3, #8]
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e046      	b.n	8002752 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a16      	ldr	r2, [pc, #88]	; (800275c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00e      	beq.n	8002726 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002710:	d009      	beq.n	8002726 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d004      	beq.n	8002726 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a10      	ldr	r2, [pc, #64]	; (8002764 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10c      	bne.n	8002740 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800272c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	4313      	orrs	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	40012c00 	.word	0x40012c00
 8002760:	40000400 	.word	0x40000400
 8002764:	40000800 	.word	0x40000800

08002768 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <memset>:
 800278c:	4603      	mov	r3, r0
 800278e:	4402      	add	r2, r0
 8002790:	4293      	cmp	r3, r2
 8002792:	d100      	bne.n	8002796 <memset+0xa>
 8002794:	4770      	bx	lr
 8002796:	f803 1b01 	strb.w	r1, [r3], #1
 800279a:	e7f9      	b.n	8002790 <memset+0x4>

0800279c <__libc_init_array>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	2600      	movs	r6, #0
 80027a0:	4d0c      	ldr	r5, [pc, #48]	; (80027d4 <__libc_init_array+0x38>)
 80027a2:	4c0d      	ldr	r4, [pc, #52]	; (80027d8 <__libc_init_array+0x3c>)
 80027a4:	1b64      	subs	r4, r4, r5
 80027a6:	10a4      	asrs	r4, r4, #2
 80027a8:	42a6      	cmp	r6, r4
 80027aa:	d109      	bne.n	80027c0 <__libc_init_array+0x24>
 80027ac:	f000 f81a 	bl	80027e4 <_init>
 80027b0:	2600      	movs	r6, #0
 80027b2:	4d0a      	ldr	r5, [pc, #40]	; (80027dc <__libc_init_array+0x40>)
 80027b4:	4c0a      	ldr	r4, [pc, #40]	; (80027e0 <__libc_init_array+0x44>)
 80027b6:	1b64      	subs	r4, r4, r5
 80027b8:	10a4      	asrs	r4, r4, #2
 80027ba:	42a6      	cmp	r6, r4
 80027bc:	d105      	bne.n	80027ca <__libc_init_array+0x2e>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c4:	4798      	blx	r3
 80027c6:	3601      	adds	r6, #1
 80027c8:	e7ee      	b.n	80027a8 <__libc_init_array+0xc>
 80027ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ce:	4798      	blx	r3
 80027d0:	3601      	adds	r6, #1
 80027d2:	e7f2      	b.n	80027ba <__libc_init_array+0x1e>
 80027d4:	08002820 	.word	0x08002820
 80027d8:	08002820 	.word	0x08002820
 80027dc:	08002820 	.word	0x08002820
 80027e0:	08002824 	.word	0x08002824

080027e4 <_init>:
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	bf00      	nop
 80027e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ea:	bc08      	pop	{r3}
 80027ec:	469e      	mov	lr, r3
 80027ee:	4770      	bx	lr

080027f0 <_fini>:
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	bf00      	nop
 80027f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f6:	bc08      	pop	{r3}
 80027f8:	469e      	mov	lr, r3
 80027fa:	4770      	bx	lr
