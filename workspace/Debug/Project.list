
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002988  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab8  08002ab8  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002ab8  08002ab8  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ab8  08002ab8  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000058  08002b18  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002b18  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008764  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001be9  00000000  00000000  00028828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002a418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c7  00000000  00000000  0002ae50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017073  00000000  00000000  0002b617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c108  00000000  00000000  0004268a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000847b0  00000000  00000000  0004e792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002830  00000000  00000000  000d2f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d5774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a7c 	.word	0x08002a7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002a7c 	.word	0x08002a7c

0800014c <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[BUTTONS_NUMBER] = {0,0,0};


int isButtonPressed(int i){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
//		HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
		button_flag[i] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0

}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000074 	.word	0x20000074

08000180 <subKeyProcess>:

void subKeyProcess(int i){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000074 	.word	0x20000074

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
for(int i=0; i<BUTTONS_NUMBER; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e089      	b.n	80002c0 <getKeyInput+0x120>
  KeyReg2[i] = KeyReg1[i];
 80001ac:	4a49      	ldr	r2, [pc, #292]	; (80002d4 <getKeyInput+0x134>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4948      	ldr	r1, [pc, #288]	; (80002d8 <getKeyInput+0x138>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg1[i] = KeyReg0[i];
 80001bc:	4a47      	ldr	r2, [pc, #284]	; (80002dc <getKeyInput+0x13c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4943      	ldr	r1, [pc, #268]	; (80002d4 <getKeyInput+0x134>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if(i == 0)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10f      	bne.n	80001f2 <getKeyInput+0x52>
	  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, buttonsArr[i]);
 80001d2:	4a43      	ldr	r2, [pc, #268]	; (80002e0 <getKeyInput+0x140>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001da:	b29b      	uxth	r3, r3
 80001dc:	4619      	mov	r1, r3
 80001de:	4841      	ldr	r0, [pc, #260]	; (80002e4 <getKeyInput+0x144>)
 80001e0:	f001 fbfc 	bl	80019dc <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a3c      	ldr	r2, [pc, #240]	; (80002dc <getKeyInput+0x13c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001f0:	e021      	b.n	8000236 <getKeyInput+0x96>
  else if(i ==1)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d10f      	bne.n	8000218 <getKeyInput+0x78>
	  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, buttonsArr[i]);
 80001f8:	4a39      	ldr	r2, [pc, #228]	; (80002e0 <getKeyInput+0x140>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000200:	b29b      	uxth	r3, r3
 8000202:	4619      	mov	r1, r3
 8000204:	4838      	ldr	r0, [pc, #224]	; (80002e8 <getKeyInput+0x148>)
 8000206:	f001 fbe9 	bl	80019dc <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	4619      	mov	r1, r3
 800020e:	4a33      	ldr	r2, [pc, #204]	; (80002dc <getKeyInput+0x13c>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000216:	e00e      	b.n	8000236 <getKeyInput+0x96>
  else
	  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, buttonsArr[i]);
 8000218:	4a31      	ldr	r2, [pc, #196]	; (80002e0 <getKeyInput+0x140>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000220:	b29b      	uxth	r3, r3
 8000222:	4619      	mov	r1, r3
 8000224:	482f      	ldr	r0, [pc, #188]	; (80002e4 <getKeyInput+0x144>)
 8000226:	f001 fbd9 	bl	80019dc <HAL_GPIO_ReadPin>
 800022a:	4603      	mov	r3, r0
 800022c:	4619      	mov	r1, r3
 800022e:	4a2b      	ldr	r2, [pc, #172]	; (80002dc <getKeyInput+0x13c>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000236:	4a27      	ldr	r2, [pc, #156]	; (80002d4 <getKeyInput+0x134>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023e:	4927      	ldr	r1, [pc, #156]	; (80002dc <getKeyInput+0x13c>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000246:	429a      	cmp	r2, r3
 8000248:	d137      	bne.n	80002ba <getKeyInput+0x11a>
 800024a:	4a22      	ldr	r2, [pc, #136]	; (80002d4 <getKeyInput+0x134>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000252:	4921      	ldr	r1, [pc, #132]	; (80002d8 <getKeyInput+0x138>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025a:	429a      	cmp	r2, r3
 800025c:	d12d      	bne.n	80002ba <getKeyInput+0x11a>
    if (KeyReg2[i] != KeyReg3[i]){
 800025e:	4a1e      	ldr	r2, [pc, #120]	; (80002d8 <getKeyInput+0x138>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000266:	4921      	ldr	r1, [pc, #132]	; (80002ec <getKeyInput+0x14c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026e:	429a      	cmp	r2, r3
 8000270:	d015      	beq.n	800029e <getKeyInput+0xfe>
      KeyReg3[i] = KeyReg2[i];
 8000272:	4a19      	ldr	r2, [pc, #100]	; (80002d8 <getKeyInput+0x138>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027a:	491c      	ldr	r1, [pc, #112]	; (80002ec <getKeyInput+0x14c>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (KeyReg3[i] == PRESSED_STATE){
 8000282:	4a1a      	ldr	r2, [pc, #104]	; (80002ec <getKeyInput+0x14c>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d115      	bne.n	80002ba <getKeyInput+0x11a>
        TimeOutForKeyPress = 500;
 800028e:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <getKeyInput+0x150>)
 8000290:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000294:	601a      	str	r2, [r3, #0]
        subKeyProcess(i);
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f7ff ff72 	bl	8000180 <subKeyProcess>
 800029c:	e00d      	b.n	80002ba <getKeyInput+0x11a>
      }
    }else{
       TimeOutForKeyPress --;
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <getKeyInput+0x150>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	3b01      	subs	r3, #1
 80002a4:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <getKeyInput+0x150>)
 80002a6:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <getKeyInput+0x150>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d104      	bne.n	80002ba <getKeyInput+0x11a>
          KeyReg3[i] = NORMAL_STATE;
 80002b0:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <getKeyInput+0x14c>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2101      	movs	r1, #1
 80002b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
for(int i=0; i<BUTTONS_NUMBER; i++){
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	3301      	adds	r3, #1
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	f77f af72 	ble.w	80001ac <getKeyInput+0xc>
        }
    }
  }
}
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000018 	.word	0x20000018
 80002d8:	20000024 	.word	0x20000024
 80002dc:	2000000c 	.word	0x2000000c
 80002e0:	20000000 	.word	0x20000000
 80002e4:	40011000 	.word	0x40011000
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	20000030 	.word	0x20000030
 80002f0:	2000003c 	.word	0x2000003c

080002f4 <displayFirstLedCouple>:
 *      Author: ad
 */
#include "display_led.h"


void displayFirstLedCouple(enum LedState state_1){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
	switch(state_1){
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	2b03      	cmp	r3, #3
 8000302:	d84b      	bhi.n	800039c <displayFirstLedCouple+0xa8>
 8000304:	a201      	add	r2, pc, #4	; (adr r2, 800030c <displayFirstLedCouple+0x18>)
 8000306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030a:	bf00      	nop
 800030c:	0800031d 	.word	0x0800031d
 8000310:	0800033d 	.word	0x0800033d
 8000314:	0800037d 	.word	0x0800037d
 8000318:	0800035d 	.word	0x0800035d
	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 800031c:	2200      	movs	r2, #0
 800031e:	2110      	movs	r1, #16
 8000320:	4821      	ldr	r0, [pc, #132]	; (80003a8 <displayFirstLedCouple+0xb4>)
 8000322:	f001 fb72 	bl	8001a0a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0) ;
 8000326:	2200      	movs	r2, #0
 8000328:	2102      	movs	r1, #2
 800032a:	481f      	ldr	r0, [pc, #124]	; (80003a8 <displayFirstLedCouple+0xb4>)
 800032c:	f001 fb6d 	bl	8001a0a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0) ;
 8000330:	2200      	movs	r2, #0
 8000332:	2101      	movs	r1, #1
 8000334:	481c      	ldr	r0, [pc, #112]	; (80003a8 <displayFirstLedCouple+0xb4>)
 8000336:	f001 fb68 	bl	8001a0a <HAL_GPIO_WritePin>
			 break;
 800033a:	e030      	b.n	800039e <displayFirstLedCouple+0xaa>
	 case RED:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 800033c:	2200      	movs	r2, #0
 800033e:	2110      	movs	r1, #16
 8000340:	4819      	ldr	r0, [pc, #100]	; (80003a8 <displayFirstLedCouple+0xb4>)
 8000342:	f001 fb62 	bl	8001a0a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0) ;
 8000346:	2200      	movs	r2, #0
 8000348:	2102      	movs	r1, #2
 800034a:	4817      	ldr	r0, [pc, #92]	; (80003a8 <displayFirstLedCouple+0xb4>)
 800034c:	f001 fb5d 	bl	8001a0a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 1) ;
 8000350:	2201      	movs	r2, #1
 8000352:	2101      	movs	r1, #1
 8000354:	4814      	ldr	r0, [pc, #80]	; (80003a8 <displayFirstLedCouple+0xb4>)
 8000356:	f001 fb58 	bl	8001a0a <HAL_GPIO_WritePin>
			 break;
 800035a:	e020      	b.n	800039e <displayFirstLedCouple+0xaa>
	 case YELLOW:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 800035c:	2200      	movs	r2, #0
 800035e:	2110      	movs	r1, #16
 8000360:	4811      	ldr	r0, [pc, #68]	; (80003a8 <displayFirstLedCouple+0xb4>)
 8000362:	f001 fb52 	bl	8001a0a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 1) ;
 8000366:	2201      	movs	r2, #1
 8000368:	2102      	movs	r1, #2
 800036a:	480f      	ldr	r0, [pc, #60]	; (80003a8 <displayFirstLedCouple+0xb4>)
 800036c:	f001 fb4d 	bl	8001a0a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0) ;
 8000370:	2200      	movs	r2, #0
 8000372:	2101      	movs	r1, #1
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <displayFirstLedCouple+0xb4>)
 8000376:	f001 fb48 	bl	8001a0a <HAL_GPIO_WritePin>
			 break;
 800037a:	e010      	b.n	800039e <displayFirstLedCouple+0xaa>
	 case GREEN:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 1) ;
 800037c:	2201      	movs	r2, #1
 800037e:	2110      	movs	r1, #16
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <displayFirstLedCouple+0xb4>)
 8000382:	f001 fb42 	bl	8001a0a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0) ;
 8000386:	2200      	movs	r2, #0
 8000388:	2102      	movs	r1, #2
 800038a:	4807      	ldr	r0, [pc, #28]	; (80003a8 <displayFirstLedCouple+0xb4>)
 800038c:	f001 fb3d 	bl	8001a0a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0) ;
 8000390:	2200      	movs	r2, #0
 8000392:	2101      	movs	r1, #1
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <displayFirstLedCouple+0xb4>)
 8000396:	f001 fb38 	bl	8001a0a <HAL_GPIO_WritePin>
			 break;
 800039a:	e000      	b.n	800039e <displayFirstLedCouple+0xaa>
	 default:
		 break;
 800039c:	bf00      	nop
	}
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010800 	.word	0x40010800

080003ac <displaySecondLedCouple>:



void displaySecondLedCouple(enum LedState state_2){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
	switch(state_2){
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	d853      	bhi.n	8000464 <displaySecondLedCouple+0xb8>
 80003bc:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <displaySecondLedCouple+0x18>)
 80003be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c2:	bf00      	nop
 80003c4:	080003d5 	.word	0x080003d5
 80003c8:	080003f9 	.word	0x080003f9
 80003cc:	08000441 	.word	0x08000441
 80003d0:	0800041d 	.word	0x0800041d
	 	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003da:	4825      	ldr	r0, [pc, #148]	; (8000470 <displaySecondLedCouple+0xc4>)
 80003dc:	f001 fb15 	bl	8001a0a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0) ;
 80003e0:	2200      	movs	r2, #0
 80003e2:	2101      	movs	r1, #1
 80003e4:	4823      	ldr	r0, [pc, #140]	; (8000474 <displaySecondLedCouple+0xc8>)
 80003e6:	f001 fb10 	bl	8001a0a <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0) ;
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f0:	481f      	ldr	r0, [pc, #124]	; (8000470 <displaySecondLedCouple+0xc4>)
 80003f2:	f001 fb0a 	bl	8001a0a <HAL_GPIO_WritePin>
			 break;
 80003f6:	e036      	b.n	8000466 <displaySecondLedCouple+0xba>
		case RED:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fe:	481c      	ldr	r0, [pc, #112]	; (8000470 <displaySecondLedCouple+0xc4>)
 8000400:	f001 fb03 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0) ;
 8000404:	2200      	movs	r2, #0
 8000406:	2101      	movs	r1, #1
 8000408:	481a      	ldr	r0, [pc, #104]	; (8000474 <displaySecondLedCouple+0xc8>)
 800040a:	f001 fafe 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 1) ;
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000414:	4816      	ldr	r0, [pc, #88]	; (8000470 <displaySecondLedCouple+0xc4>)
 8000416:	f001 faf8 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 800041a:	e024      	b.n	8000466 <displaySecondLedCouple+0xba>
		case YELLOW:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000422:	4813      	ldr	r0, [pc, #76]	; (8000470 <displaySecondLedCouple+0xc4>)
 8000424:	f001 faf1 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 1) ;
 8000428:	2201      	movs	r2, #1
 800042a:	2101      	movs	r1, #1
 800042c:	4811      	ldr	r0, [pc, #68]	; (8000474 <displaySecondLedCouple+0xc8>)
 800042e:	f001 faec 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0) ;
 8000432:	2200      	movs	r2, #0
 8000434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <displaySecondLedCouple+0xc4>)
 800043a:	f001 fae6 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 800043e:	e012      	b.n	8000466 <displaySecondLedCouple+0xba>
		case GREEN:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 1) ;
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000446:	480a      	ldr	r0, [pc, #40]	; (8000470 <displaySecondLedCouple+0xc4>)
 8000448:	f001 fadf 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0) ;
 800044c:	2200      	movs	r2, #0
 800044e:	2101      	movs	r1, #1
 8000450:	4808      	ldr	r0, [pc, #32]	; (8000474 <displaySecondLedCouple+0xc8>)
 8000452:	f001 fada 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0) ;
 8000456:	2200      	movs	r2, #0
 8000458:	f44f 7180 	mov.w	r1, #256	; 0x100
 800045c:	4804      	ldr	r0, [pc, #16]	; (8000470 <displaySecondLedCouple+0xc4>)
 800045e:	f001 fad4 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 8000462:	e000      	b.n	8000466 <displaySecondLedCouple+0xba>
		default:
		  break;
 8000464:	bf00      	nop
   }
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40010c00 	.word	0x40010c00
 8000474:	40011000 	.word	0x40011000

08000478 <toggleLeds>:

void toggleLeds(enum LedState state){
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
	switch(state){
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	2b03      	cmp	r3, #3
 8000486:	d00f      	beq.n	80004a8 <toggleLeds+0x30>
 8000488:	2b03      	cmp	r3, #3
 800048a:	dc20      	bgt.n	80004ce <toggleLeds+0x56>
 800048c:	2b01      	cmp	r3, #1
 800048e:	d014      	beq.n	80004ba <toggleLeds+0x42>
 8000490:	2b02      	cmp	r3, #2
 8000492:	d11c      	bne.n	80004ce <toggleLeds+0x56>
	 case GREEN:
			 HAL_GPIO_TogglePin( GREEN1_GPIO_Port , GREEN1_Pin) ;
 8000494:	2110      	movs	r1, #16
 8000496:	4810      	ldr	r0, [pc, #64]	; (80004d8 <toggleLeds+0x60>)
 8000498:	f001 facf 	bl	8001a3a <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( GREEN2_GPIO_Port , GREEN2_Pin) ;
 800049c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a0:	480e      	ldr	r0, [pc, #56]	; (80004dc <toggleLeds+0x64>)
 80004a2:	f001 faca 	bl	8001a3a <HAL_GPIO_TogglePin>
			 break;
 80004a6:	e013      	b.n	80004d0 <toggleLeds+0x58>
	 case YELLOW:
			 HAL_GPIO_TogglePin( YELLOW1_GPIO_Port , YELLOW1_Pin) ;
 80004a8:	2102      	movs	r1, #2
 80004aa:	480b      	ldr	r0, [pc, #44]	; (80004d8 <toggleLeds+0x60>)
 80004ac:	f001 fac5 	bl	8001a3a <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( YELLOW2_GPIO_Port , YELLOW2_Pin) ;
 80004b0:	2101      	movs	r1, #1
 80004b2:	480b      	ldr	r0, [pc, #44]	; (80004e0 <toggleLeds+0x68>)
 80004b4:	f001 fac1 	bl	8001a3a <HAL_GPIO_TogglePin>
			 break;
 80004b8:	e00a      	b.n	80004d0 <toggleLeds+0x58>
	 case RED:
			 HAL_GPIO_TogglePin( RED1_GPIO_Port , RED1_Pin) ;
 80004ba:	2101      	movs	r1, #1
 80004bc:	4806      	ldr	r0, [pc, #24]	; (80004d8 <toggleLeds+0x60>)
 80004be:	f001 fabc 	bl	8001a3a <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( RED2_GPIO_Port , RED2_Pin) ;
 80004c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <toggleLeds+0x64>)
 80004c8:	f001 fab7 	bl	8001a3a <HAL_GPIO_TogglePin>
			 break;
 80004cc:	e000      	b.n	80004d0 <toggleLeds+0x58>
	 default:
		 break;
 80004ce:	bf00      	nop
	}
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40010800 	.word	0x40010800
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	40011000 	.word	0x40011000

080004e4 <displaySEG7>:


void displaySEG7(int num){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	switch(num){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2b09      	cmp	r3, #9
 80004f0:	f200 81a8 	bhi.w	8000844 <displaySEG7+0x360>
 80004f4:	a201      	add	r2, pc, #4	; (adr r2, 80004fc <displaySEG7+0x18>)
 80004f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fa:	bf00      	nop
 80004fc:	08000525 	.word	0x08000525
 8000500:	08000575 	.word	0x08000575
 8000504:	080005c5 	.word	0x080005c5
 8000508:	08000615 	.word	0x08000615
 800050c:	08000665 	.word	0x08000665
 8000510:	080006b5 	.word	0x080006b5
 8000514:	08000705 	.word	0x08000705
 8000518:	08000755 	.word	0x08000755
 800051c:	080007a5 	.word	0x080007a5
 8000520:	080007f5 	.word	0x080007f5
		case 0:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000524:	2200      	movs	r2, #0
 8000526:	2108      	movs	r1, #8
 8000528:	48c9      	ldr	r0, [pc, #804]	; (8000850 <displaySEG7+0x36c>)
 800052a:	f001 fa6e 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800052e:	2200      	movs	r2, #0
 8000530:	2104      	movs	r1, #4
 8000532:	48c7      	ldr	r0, [pc, #796]	; (8000850 <displaySEG7+0x36c>)
 8000534:	f001 fa69 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053e:	48c4      	ldr	r0, [pc, #784]	; (8000850 <displaySEG7+0x36c>)
 8000540:	f001 fa63 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000544:	2200      	movs	r2, #0
 8000546:	2120      	movs	r1, #32
 8000548:	48c2      	ldr	r0, [pc, #776]	; (8000854 <displaySEG7+0x370>)
 800054a:	f001 fa5e 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000554:	48bf      	ldr	r0, [pc, #764]	; (8000854 <displaySEG7+0x370>)
 8000556:	f001 fa58 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000560:	48bb      	ldr	r0, [pc, #748]	; (8000850 <displaySEG7+0x36c>)
 8000562:	f001 fa52 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056c:	48b8      	ldr	r0, [pc, #736]	; (8000850 <displaySEG7+0x36c>)
 800056e:	f001 fa4c 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 8000572:	e168      	b.n	8000846 <displaySEG7+0x362>

		case 1:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 ) ;
 8000574:	2201      	movs	r2, #1
 8000576:	2108      	movs	r1, #8
 8000578:	48b5      	ldr	r0, [pc, #724]	; (8000850 <displaySEG7+0x36c>)
 800057a:	f001 fa46 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800057e:	2200      	movs	r2, #0
 8000580:	2104      	movs	r1, #4
 8000582:	48b3      	ldr	r0, [pc, #716]	; (8000850 <displaySEG7+0x36c>)
 8000584:	f001 fa41 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058e:	48b0      	ldr	r0, [pc, #704]	; (8000850 <displaySEG7+0x36c>)
 8000590:	f001 fa3b 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 8000594:	2201      	movs	r2, #1
 8000596:	2120      	movs	r1, #32
 8000598:	48ae      	ldr	r0, [pc, #696]	; (8000854 <displaySEG7+0x370>)
 800059a:	f001 fa36 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	48ab      	ldr	r0, [pc, #684]	; (8000854 <displaySEG7+0x370>)
 80005a6:	f001 fa30 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b0:	48a7      	ldr	r0, [pc, #668]	; (8000850 <displaySEG7+0x36c>)
 80005b2:	f001 fa2a 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005bc:	48a4      	ldr	r0, [pc, #656]	; (8000850 <displaySEG7+0x36c>)
 80005be:	f001 fa24 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 80005c2:	e140      	b.n	8000846 <displaySEG7+0x362>

		case 2:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80005c4:	2200      	movs	r2, #0
 80005c6:	2108      	movs	r1, #8
 80005c8:	48a1      	ldr	r0, [pc, #644]	; (8000850 <displaySEG7+0x36c>)
 80005ca:	f001 fa1e 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80005ce:	2200      	movs	r2, #0
 80005d0:	2104      	movs	r1, #4
 80005d2:	489f      	ldr	r0, [pc, #636]	; (8000850 <displaySEG7+0x36c>)
 80005d4:	f001 fa19 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 1 ) ;
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005de:	489c      	ldr	r0, [pc, #624]	; (8000850 <displaySEG7+0x36c>)
 80005e0:	f001 fa13 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80005e4:	2200      	movs	r2, #0
 80005e6:	2120      	movs	r1, #32
 80005e8:	489a      	ldr	r0, [pc, #616]	; (8000854 <displaySEG7+0x370>)
 80005ea:	f001 fa0e 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f4:	4897      	ldr	r0, [pc, #604]	; (8000854 <displaySEG7+0x370>)
 80005f6:	f001 fa08 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000600:	4893      	ldr	r0, [pc, #588]	; (8000850 <displaySEG7+0x36c>)
 8000602:	f001 fa02 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800060c:	4890      	ldr	r0, [pc, #576]	; (8000850 <displaySEG7+0x36c>)
 800060e:	f001 f9fc 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 8000612:	e118      	b.n	8000846 <displaySEG7+0x362>

		case 3:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000614:	2200      	movs	r2, #0
 8000616:	2108      	movs	r1, #8
 8000618:	488d      	ldr	r0, [pc, #564]	; (8000850 <displaySEG7+0x36c>)
 800061a:	f001 f9f6 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800061e:	2200      	movs	r2, #0
 8000620:	2104      	movs	r1, #4
 8000622:	488b      	ldr	r0, [pc, #556]	; (8000850 <displaySEG7+0x36c>)
 8000624:	f001 f9f1 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062e:	4888      	ldr	r0, [pc, #544]	; (8000850 <displaySEG7+0x36c>)
 8000630:	f001 f9eb 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000634:	2200      	movs	r2, #0
 8000636:	2120      	movs	r1, #32
 8000638:	4886      	ldr	r0, [pc, #536]	; (8000854 <displaySEG7+0x370>)
 800063a:	f001 f9e6 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000644:	4883      	ldr	r0, [pc, #524]	; (8000854 <displaySEG7+0x370>)
 8000646:	f001 f9e0 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	487f      	ldr	r0, [pc, #508]	; (8000850 <displaySEG7+0x36c>)
 8000652:	f001 f9da 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800065c:	487c      	ldr	r0, [pc, #496]	; (8000850 <displaySEG7+0x36c>)
 800065e:	f001 f9d4 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 8000662:	e0f0      	b.n	8000846 <displaySEG7+0x362>

		case 4:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 ) ;
 8000664:	2201      	movs	r2, #1
 8000666:	2108      	movs	r1, #8
 8000668:	4879      	ldr	r0, [pc, #484]	; (8000850 <displaySEG7+0x36c>)
 800066a:	f001 f9ce 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800066e:	2200      	movs	r2, #0
 8000670:	2104      	movs	r1, #4
 8000672:	4877      	ldr	r0, [pc, #476]	; (8000850 <displaySEG7+0x36c>)
 8000674:	f001 f9c9 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067e:	4874      	ldr	r0, [pc, #464]	; (8000850 <displaySEG7+0x36c>)
 8000680:	f001 f9c3 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 8000684:	2201      	movs	r2, #1
 8000686:	2120      	movs	r1, #32
 8000688:	4872      	ldr	r0, [pc, #456]	; (8000854 <displaySEG7+0x370>)
 800068a:	f001 f9be 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000694:	486f      	ldr	r0, [pc, #444]	; (8000854 <displaySEG7+0x370>)
 8000696:	f001 f9b8 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a0:	486b      	ldr	r0, [pc, #428]	; (8000850 <displaySEG7+0x36c>)
 80006a2:	f001 f9b2 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ac:	4868      	ldr	r0, [pc, #416]	; (8000850 <displaySEG7+0x36c>)
 80006ae:	f001 f9ac 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 80006b2:	e0c8      	b.n	8000846 <displaySEG7+0x362>

		case 5:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80006b4:	2200      	movs	r2, #0
 80006b6:	2108      	movs	r1, #8
 80006b8:	4865      	ldr	r0, [pc, #404]	; (8000850 <displaySEG7+0x36c>)
 80006ba:	f001 f9a6 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 ) ;
 80006be:	2201      	movs	r2, #1
 80006c0:	2104      	movs	r1, #4
 80006c2:	4863      	ldr	r0, [pc, #396]	; (8000850 <displaySEG7+0x36c>)
 80006c4:	f001 f9a1 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ce:	4860      	ldr	r0, [pc, #384]	; (8000850 <displaySEG7+0x36c>)
 80006d0:	f001 f99b 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80006d4:	2200      	movs	r2, #0
 80006d6:	2120      	movs	r1, #32
 80006d8:	485e      	ldr	r0, [pc, #376]	; (8000854 <displaySEG7+0x370>)
 80006da:	f001 f996 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e4:	485b      	ldr	r0, [pc, #364]	; (8000854 <displaySEG7+0x370>)
 80006e6:	f001 f990 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f0:	4857      	ldr	r0, [pc, #348]	; (8000850 <displaySEG7+0x36c>)
 80006f2:	f001 f98a 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fc:	4854      	ldr	r0, [pc, #336]	; (8000850 <displaySEG7+0x36c>)
 80006fe:	f001 f984 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 8000702:	e0a0      	b.n	8000846 <displaySEG7+0x362>

		case 6:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000704:	2200      	movs	r2, #0
 8000706:	2108      	movs	r1, #8
 8000708:	4851      	ldr	r0, [pc, #324]	; (8000850 <displaySEG7+0x36c>)
 800070a:	f001 f97e 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 ) ;
 800070e:	2201      	movs	r2, #1
 8000710:	2104      	movs	r1, #4
 8000712:	484f      	ldr	r0, [pc, #316]	; (8000850 <displaySEG7+0x36c>)
 8000714:	f001 f979 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071e:	484c      	ldr	r0, [pc, #304]	; (8000850 <displaySEG7+0x36c>)
 8000720:	f001 f973 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000724:	2200      	movs	r2, #0
 8000726:	2120      	movs	r1, #32
 8000728:	484a      	ldr	r0, [pc, #296]	; (8000854 <displaySEG7+0x370>)
 800072a:	f001 f96e 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000734:	4847      	ldr	r0, [pc, #284]	; (8000854 <displaySEG7+0x370>)
 8000736:	f001 f968 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000740:	4843      	ldr	r0, [pc, #268]	; (8000850 <displaySEG7+0x36c>)
 8000742:	f001 f962 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074c:	4840      	ldr	r0, [pc, #256]	; (8000850 <displaySEG7+0x36c>)
 800074e:	f001 f95c 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 8000752:	e078      	b.n	8000846 <displaySEG7+0x362>

		case 7:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000754:	2200      	movs	r2, #0
 8000756:	2108      	movs	r1, #8
 8000758:	483d      	ldr	r0, [pc, #244]	; (8000850 <displaySEG7+0x36c>)
 800075a:	f001 f956 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800075e:	2200      	movs	r2, #0
 8000760:	2104      	movs	r1, #4
 8000762:	483b      	ldr	r0, [pc, #236]	; (8000850 <displaySEG7+0x36c>)
 8000764:	f001 f951 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076e:	4838      	ldr	r0, [pc, #224]	; (8000850 <displaySEG7+0x36c>)
 8000770:	f001 f94b 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 8000774:	2201      	movs	r2, #1
 8000776:	2120      	movs	r1, #32
 8000778:	4836      	ldr	r0, [pc, #216]	; (8000854 <displaySEG7+0x370>)
 800077a:	f001 f946 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000784:	4833      	ldr	r0, [pc, #204]	; (8000854 <displaySEG7+0x370>)
 8000786:	f001 f940 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	482f      	ldr	r0, [pc, #188]	; (8000850 <displaySEG7+0x36c>)
 8000792:	f001 f93a 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079c:	482c      	ldr	r0, [pc, #176]	; (8000850 <displaySEG7+0x36c>)
 800079e:	f001 f934 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 80007a2:	e050      	b.n	8000846 <displaySEG7+0x362>

		case 8:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80007a4:	2200      	movs	r2, #0
 80007a6:	2108      	movs	r1, #8
 80007a8:	4829      	ldr	r0, [pc, #164]	; (8000850 <displaySEG7+0x36c>)
 80007aa:	f001 f92e 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80007ae:	2200      	movs	r2, #0
 80007b0:	2104      	movs	r1, #4
 80007b2:	4827      	ldr	r0, [pc, #156]	; (8000850 <displaySEG7+0x36c>)
 80007b4:	f001 f929 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007be:	4824      	ldr	r0, [pc, #144]	; (8000850 <displaySEG7+0x36c>)
 80007c0:	f001 f923 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80007c4:	2200      	movs	r2, #0
 80007c6:	2120      	movs	r1, #32
 80007c8:	4822      	ldr	r0, [pc, #136]	; (8000854 <displaySEG7+0x370>)
 80007ca:	f001 f91e 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d4:	481f      	ldr	r0, [pc, #124]	; (8000854 <displaySEG7+0x370>)
 80007d6:	f001 f918 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e0:	481b      	ldr	r0, [pc, #108]	; (8000850 <displaySEG7+0x36c>)
 80007e2:	f001 f912 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ec:	4818      	ldr	r0, [pc, #96]	; (8000850 <displaySEG7+0x36c>)
 80007ee:	f001 f90c 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 80007f2:	e028      	b.n	8000846 <displaySEG7+0x362>

		case 9:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80007f4:	2200      	movs	r2, #0
 80007f6:	2108      	movs	r1, #8
 80007f8:	4815      	ldr	r0, [pc, #84]	; (8000850 <displaySEG7+0x36c>)
 80007fa:	f001 f906 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80007fe:	2200      	movs	r2, #0
 8000800:	2104      	movs	r1, #4
 8000802:	4813      	ldr	r0, [pc, #76]	; (8000850 <displaySEG7+0x36c>)
 8000804:	f001 f901 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <displaySEG7+0x36c>)
 8000810:	f001 f8fb 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000814:	2200      	movs	r2, #0
 8000816:	2120      	movs	r1, #32
 8000818:	480e      	ldr	r0, [pc, #56]	; (8000854 <displaySEG7+0x370>)
 800081a:	f001 f8f6 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <displaySEG7+0x370>)
 8000826:	f001 f8f0 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000830:	4807      	ldr	r0, [pc, #28]	; (8000850 <displaySEG7+0x36c>)
 8000832:	f001 f8ea 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <displaySEG7+0x36c>)
 800083e:	f001 f8e4 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 8000842:	e000      	b.n	8000846 <displaySEG7+0x362>


		default:
			break;
 8000844:	bf00      	nop
  }
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40010800 	.word	0x40010800
 8000854:	40010c00 	.word	0x40010c00

08000858 <auto_run>:
 *      Author: ad
 */
#include "fsm_auto.h"


void auto_run(){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1 ){
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff fc75 	bl	800014c <isButtonPressed>
 8000862:	4603      	mov	r3, r0
 8000864:	2b01      	cmp	r3, #1
 8000866:	d102      	bne.n	800086e <auto_run+0x16>
//		HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
//		                          |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
		MODE = MODE2;
 8000868:	4b84      	ldr	r3, [pc, #528]	; (8000a7c <auto_run+0x224>)
 800086a:	2202      	movs	r2, #2
 800086c:	701a      	strb	r2, [r3, #0]
	}
	if(MODE == MODE1){
 800086e:	4b83      	ldr	r3, [pc, #524]	; (8000a7c <auto_run+0x224>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	f040 80ff 	bne.w	8000a76 <auto_run+0x21e>
		switch(firstCoupleLedAutoState){
 8000878:	4b81      	ldr	r3, [pc, #516]	; (8000a80 <auto_run+0x228>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d876      	bhi.n	800096e <auto_run+0x116>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <auto_run+0x30>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	08000899 	.word	0x08000899
 800088c:	080008b3 	.word	0x080008b3
 8000890:	080008ff 	.word	0x080008ff
 8000894:	08000937 	.word	0x08000937
			case LED_INIT:
				firstCoupleLedAutoState = RED;
 8000898:	4b79      	ldr	r3, [pc, #484]	; (8000a80 <auto_run+0x228>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
				displaySEG7(countdownFirstCoupleLed);
 800089e:	4b79      	ldr	r3, [pc, #484]	; (8000a84 <auto_run+0x22c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe1e 	bl	80004e4 <displaySEG7>
				setTimer(0, 100);
 80008a8:	2164      	movs	r1, #100	; 0x64
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fcbe 	bl	800122c <setTimer>
				break;
 80008b0:	e064      	b.n	800097c <auto_run+0x124>
			case RED:
				displayFirstLedCouple(RED);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff fd1e 	bl	80002f4 <displayFirstLedCouple>
				displaySEG7(countdownFirstCoupleLed);
 80008b8:	4b72      	ldr	r3, [pc, #456]	; (8000a84 <auto_run+0x22c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe11 	bl	80004e4 <displaySEG7>
				if(timer_flag[0] == 1){
 80008c2:	4b71      	ldr	r3, [pc, #452]	; (8000a88 <auto_run+0x230>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d153      	bne.n	8000972 <auto_run+0x11a>
					countdownFirstCoupleLed--;
 80008ca:	4b6e      	ldr	r3, [pc, #440]	; (8000a84 <auto_run+0x22c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	4a6c      	ldr	r2, [pc, #432]	; (8000a84 <auto_run+0x22c>)
 80008d2:	6013      	str	r3, [r2, #0]
					displaySEG7(countdownFirstCoupleLed);
 80008d4:	4b6b      	ldr	r3, [pc, #428]	; (8000a84 <auto_run+0x22c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fe03 	bl	80004e4 <displaySEG7>
					if(countdownFirstCoupleLed == 0){
 80008de:	4b69      	ldr	r3, [pc, #420]	; (8000a84 <auto_run+0x22c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d106      	bne.n	80008f4 <auto_run+0x9c>
						countdownFirstCoupleLed = greenDelay;
 80008e6:	4b69      	ldr	r3, [pc, #420]	; (8000a8c <auto_run+0x234>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a66      	ldr	r2, [pc, #408]	; (8000a84 <auto_run+0x22c>)
 80008ec:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = GREEN;
 80008ee:	4b64      	ldr	r3, [pc, #400]	; (8000a80 <auto_run+0x228>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	701a      	strb	r2, [r3, #0]
					}
					setTimer(0, 100);
 80008f4:	2164      	movs	r1, #100	; 0x64
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 fc98 	bl	800122c <setTimer>
				}
				break;
 80008fc:	e039      	b.n	8000972 <auto_run+0x11a>
			case GREEN:
				displayFirstLedCouple(GREEN);
 80008fe:	2002      	movs	r0, #2
 8000900:	f7ff fcf8 	bl	80002f4 <displayFirstLedCouple>
				if(timer_flag[0] == 1){
 8000904:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <auto_run+0x230>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d134      	bne.n	8000976 <auto_run+0x11e>
					countdownFirstCoupleLed--;
 800090c:	4b5d      	ldr	r3, [pc, #372]	; (8000a84 <auto_run+0x22c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3b01      	subs	r3, #1
 8000912:	4a5c      	ldr	r2, [pc, #368]	; (8000a84 <auto_run+0x22c>)
 8000914:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 8000916:	4b5b      	ldr	r3, [pc, #364]	; (8000a84 <auto_run+0x22c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d106      	bne.n	800092c <auto_run+0xd4>
						countdownFirstCoupleLed = yellowDelay;
 800091e:	4b5c      	ldr	r3, [pc, #368]	; (8000a90 <auto_run+0x238>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a58      	ldr	r2, [pc, #352]	; (8000a84 <auto_run+0x22c>)
 8000924:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = YELLOW;
 8000926:	4b56      	ldr	r3, [pc, #344]	; (8000a80 <auto_run+0x228>)
 8000928:	2203      	movs	r2, #3
 800092a:	701a      	strb	r2, [r3, #0]
					}
					setTimer(0, 100);
 800092c:	2164      	movs	r1, #100	; 0x64
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fc7c 	bl	800122c <setTimer>
				}
				break;
 8000934:	e01f      	b.n	8000976 <auto_run+0x11e>
			case YELLOW:
				displayFirstLedCouple(YELLOW);
 8000936:	2003      	movs	r0, #3
 8000938:	f7ff fcdc 	bl	80002f4 <displayFirstLedCouple>
				if(timer_flag[0] == 1){
 800093c:	4b52      	ldr	r3, [pc, #328]	; (8000a88 <auto_run+0x230>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d11a      	bne.n	800097a <auto_run+0x122>
					countdownFirstCoupleLed--;
 8000944:	4b4f      	ldr	r3, [pc, #316]	; (8000a84 <auto_run+0x22c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3b01      	subs	r3, #1
 800094a:	4a4e      	ldr	r2, [pc, #312]	; (8000a84 <auto_run+0x22c>)
 800094c:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 800094e:	4b4d      	ldr	r3, [pc, #308]	; (8000a84 <auto_run+0x22c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d106      	bne.n	8000964 <auto_run+0x10c>
						countdownFirstCoupleLed = redDelay;
 8000956:	4b4f      	ldr	r3, [pc, #316]	; (8000a94 <auto_run+0x23c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a4a      	ldr	r2, [pc, #296]	; (8000a84 <auto_run+0x22c>)
 800095c:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = RED;
 800095e:	4b48      	ldr	r3, [pc, #288]	; (8000a80 <auto_run+0x228>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
					}
					setTimer(0, 100);
 8000964:	2164      	movs	r1, #100	; 0x64
 8000966:	2000      	movs	r0, #0
 8000968:	f000 fc60 	bl	800122c <setTimer>
				}
				break;
 800096c:	e005      	b.n	800097a <auto_run+0x122>
			default:
				break;
 800096e:	bf00      	nop
 8000970:	e004      	b.n	800097c <auto_run+0x124>
				break;
 8000972:	bf00      	nop
 8000974:	e002      	b.n	800097c <auto_run+0x124>
				break;
 8000976:	bf00      	nop
 8000978:	e000      	b.n	800097c <auto_run+0x124>
				break;
 800097a:	bf00      	nop
		}
		switch(secondCoupleLedAutoState){
 800097c:	4b46      	ldr	r3, [pc, #280]	; (8000a98 <auto_run+0x240>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b03      	cmp	r3, #3
 8000982:	d871      	bhi.n	8000a68 <auto_run+0x210>
 8000984:	a201      	add	r2, pc, #4	; (adr r2, 800098c <auto_run+0x134>)
 8000986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098a:	bf00      	nop
 800098c:	0800099d 	.word	0x0800099d
 8000990:	080009ad 	.word	0x080009ad
 8000994:	080009f9 	.word	0x080009f9
 8000998:	08000a31 	.word	0x08000a31
			case LED_INIT:
				secondCoupleLedAutoState = GREEN;
 800099c:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <auto_run+0x240>)
 800099e:	2202      	movs	r2, #2
 80009a0:	701a      	strb	r2, [r3, #0]
				setTimer(1, 100);
 80009a2:	2164      	movs	r1, #100	; 0x64
 80009a4:	2001      	movs	r0, #1
 80009a6:	f000 fc41 	bl	800122c <setTimer>
				break;
 80009aa:	e064      	b.n	8000a76 <auto_run+0x21e>
			case RED:
				displaySecondLedCouple(RED);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff fcfd 	bl	80003ac <displaySecondLedCouple>
				displaySEG7(countdownSecondCoupleLed);
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <auto_run+0x244>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fd94 	bl	80004e4 <displaySEG7>
				if(timer_flag[1] == 1){
 80009bc:	4b32      	ldr	r3, [pc, #200]	; (8000a88 <auto_run+0x230>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d153      	bne.n	8000a6c <auto_run+0x214>
					countdownSecondCoupleLed--;
 80009c4:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <auto_run+0x244>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	4a34      	ldr	r2, [pc, #208]	; (8000a9c <auto_run+0x244>)
 80009cc:	6013      	str	r3, [r2, #0]
					displaySEG7(countdownSecondCoupleLed);
 80009ce:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <auto_run+0x244>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fd86 	bl	80004e4 <displaySEG7>
					if(countdownSecondCoupleLed == 0){
 80009d8:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <auto_run+0x244>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d106      	bne.n	80009ee <auto_run+0x196>
						countdownSecondCoupleLed = greenDelay;
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <auto_run+0x234>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <auto_run+0x244>)
 80009e6:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = GREEN;
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <auto_run+0x240>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	701a      	strb	r2, [r3, #0]
					}
					setTimer(1, 100);
 80009ee:	2164      	movs	r1, #100	; 0x64
 80009f0:	2001      	movs	r0, #1
 80009f2:	f000 fc1b 	bl	800122c <setTimer>
				}
				break;
 80009f6:	e039      	b.n	8000a6c <auto_run+0x214>
			case GREEN:
				displaySecondLedCouple(GREEN);
 80009f8:	2002      	movs	r0, #2
 80009fa:	f7ff fcd7 	bl	80003ac <displaySecondLedCouple>
				if(timer_flag[1] == 1){
 80009fe:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <auto_run+0x230>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d134      	bne.n	8000a70 <auto_run+0x218>
					countdownSecondCoupleLed--;
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <auto_run+0x244>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <auto_run+0x244>)
 8000a0e:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <auto_run+0x244>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d106      	bne.n	8000a26 <auto_run+0x1ce>
						countdownSecondCoupleLed = yellowDelay;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <auto_run+0x238>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1f      	ldr	r2, [pc, #124]	; (8000a9c <auto_run+0x244>)
 8000a1e:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = YELLOW;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <auto_run+0x240>)
 8000a22:	2203      	movs	r2, #3
 8000a24:	701a      	strb	r2, [r3, #0]
					}
					setTimer(1, 100);
 8000a26:	2164      	movs	r1, #100	; 0x64
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f000 fbff 	bl	800122c <setTimer>
				}
				break;
 8000a2e:	e01f      	b.n	8000a70 <auto_run+0x218>
			case YELLOW:
				displaySecondLedCouple(YELLOW);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f7ff fcbb 	bl	80003ac <displaySecondLedCouple>
				if(timer_flag[1] == 1){
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <auto_run+0x230>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d11a      	bne.n	8000a74 <auto_run+0x21c>
					countdownSecondCoupleLed--;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <auto_run+0x244>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <auto_run+0x244>)
 8000a46:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <auto_run+0x244>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d106      	bne.n	8000a5e <auto_run+0x206>
						countdownSecondCoupleLed = redDelay;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <auto_run+0x23c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <auto_run+0x244>)
 8000a56:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = RED;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <auto_run+0x240>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
					}
					setTimer(1, 100);
 8000a5e:	2164      	movs	r1, #100	; 0x64
 8000a60:	2001      	movs	r0, #1
 8000a62:	f000 fbe3 	bl	800122c <setTimer>
				}
				break;
 8000a66:	e005      	b.n	8000a74 <auto_run+0x21c>
			default:
				break;
 8000a68:	bf00      	nop
 8000a6a:	e004      	b.n	8000a76 <auto_run+0x21e>
				break;
 8000a6c:	bf00      	nop
 8000a6e:	e002      	b.n	8000a76 <auto_run+0x21e>
				break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <auto_run+0x21e>
				break;
 8000a74:	bf00      	nop
//				break;
//			default:
//				break;
//		}
	}
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000080 	.word	0x20000080
 8000a80:	2000008a 	.word	0x2000008a
 8000a84:	20000090 	.word	0x20000090
 8000a88:	20000108 	.word	0x20000108
 8000a8c:	20000044 	.word	0x20000044
 8000a90:	20000048 	.word	0x20000048
 8000a94:	20000040 	.word	0x20000040
 8000a98:	2000008b 	.word	0x2000008b
 8000a9c:	20000094 	.word	0x20000094

08000aa0 <mode2_run>:
 *      Author: ad
 */

#include "fsm_manual.h"

void mode2_run(){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	displaySEG7(redDelay);
 8000aa4:	4b41      	ldr	r3, [pc, #260]	; (8000bac <mode2_run+0x10c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fd1b 	bl	80004e4 <displaySEG7>
	switch(mode2Toggle){
 8000aae:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <mode2_run+0x110>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <mode2_run+0x1c>
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d028      	beq.n	8000b0c <mode2_run+0x6c>
				toggleLeds(RED);
				setTimer(3, 25);
			}
			break;
		default:
			break;
 8000aba:	e033      	b.n	8000b24 <mode2_run+0x84>
			HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 8000abc:	2200      	movs	r2, #0
 8000abe:	2110      	movs	r1, #16
 8000ac0:	483c      	ldr	r0, [pc, #240]	; (8000bb4 <mode2_run+0x114>)
 8000ac2:	f000 ffa2 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0) ;
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2102      	movs	r1, #2
 8000aca:	483a      	ldr	r0, [pc, #232]	; (8000bb4 <mode2_run+0x114>)
 8000acc:	f000 ff9d 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0) ;
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4837      	ldr	r0, [pc, #220]	; (8000bb4 <mode2_run+0x114>)
 8000ad6:	f000 ff98 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae0:	4835      	ldr	r0, [pc, #212]	; (8000bb8 <mode2_run+0x118>)
 8000ae2:	f000 ff92 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0) ;
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4834      	ldr	r0, [pc, #208]	; (8000bbc <mode2_run+0x11c>)
 8000aec:	f000 ff8d 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0) ;
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af6:	4830      	ldr	r0, [pc, #192]	; (8000bb8 <mode2_run+0x118>)
 8000af8:	f000 ff87 	bl	8001a0a <HAL_GPIO_WritePin>
			mode2Toggle = TOGGLE;
 8000afc:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <mode2_run+0x110>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
			setTimer(3, 25);
 8000b02:	2119      	movs	r1, #25
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 fb91 	bl	800122c <setTimer>
			break;
 8000b0a:	e00b      	b.n	8000b24 <mode2_run+0x84>
			if(timer_flag[3] == 1){
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <mode2_run+0x120>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d106      	bne.n	8000b22 <mode2_run+0x82>
				toggleLeds(RED);
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff fcaf 	bl	8000478 <toggleLeds>
				setTimer(3, 25);
 8000b1a:	2119      	movs	r1, #25
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 fb85 	bl	800122c <setTimer>
			break;
 8000b22:	bf00      	nop
	}

	switch(mode2Increase){
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <mode2_run+0x124>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <mode2_run+0x92>
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d014      	beq.n	8000b5a <mode2_run+0xba>
					setValues();
				}
				break;

			default:
				break;
 8000b30:	e039      	b.n	8000ba6 <mode2_run+0x106>
				if (isButtonPressed(1)==1){
 8000b32:	2001      	movs	r0, #1
 8000b34:	f7ff fb0a 	bl	800014c <isButtonPressed>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d130      	bne.n	8000ba0 <mode2_run+0x100>
					mode2Increase = INCREASE;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <mode2_run+0x124>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
					redDelay +=1;
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <mode2_run+0x10c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	4a18      	ldr	r2, [pc, #96]	; (8000bac <mode2_run+0x10c>)
 8000b4c:	6013      	str	r3, [r2, #0]
					greenDelay +=1;
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <mode2_run+0x128>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <mode2_run+0x128>)
 8000b56:	6013      	str	r3, [r2, #0]
				break;
 8000b58:	e022      	b.n	8000ba0 <mode2_run+0x100>
				if (isButtonPressed(1)==1){
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff faf6 	bl	800014c <isButtonPressed>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d110      	bne.n	8000b88 <mode2_run+0xe8>
					redDelay +=1;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <mode2_run+0x10c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <mode2_run+0x10c>)
 8000b6e:	6013      	str	r3, [r2, #0]
					greenDelay +=1;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <mode2_run+0x128>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <mode2_run+0x128>)
 8000b78:	6013      	str	r3, [r2, #0]
					if(redDelay > 9) redDelay = 1;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <mode2_run+0x10c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b09      	cmp	r3, #9
 8000b80:	dd02      	ble.n	8000b88 <mode2_run+0xe8>
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <mode2_run+0x10c>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(2)==1){
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fadf 	bl	800014c <isButtonPressed>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d107      	bne.n	8000ba4 <mode2_run+0x104>
					MODE = MODE1;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <mode2_run+0x12c>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
					setValues();
 8000b9a:	f000 f987 	bl	8000eac <setValues>
				break;
 8000b9e:	e001      	b.n	8000ba4 <mode2_run+0x104>
				break;
 8000ba0:	bf00      	nop
 8000ba2:	e000      	b.n	8000ba6 <mode2_run+0x106>
				break;
 8000ba4:	bf00      	nop
		}
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000040 	.word	0x20000040
 8000bb0:	20000081 	.word	0x20000081
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	40011000 	.word	0x40011000
 8000bc0:	20000108 	.word	0x20000108
 8000bc4:	20000083 	.word	0x20000083
 8000bc8:	20000044 	.word	0x20000044
 8000bcc:	20000080 	.word	0x20000080

08000bd0 <mode3_run>:

void mode3_run(){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	displaySEG7(yellowDelay);
 8000bd4:	4b41      	ldr	r3, [pc, #260]	; (8000cdc <mode3_run+0x10c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fc83 	bl	80004e4 <displaySEG7>
	switch(mode3Toggle){
 8000bde:	4b40      	ldr	r3, [pc, #256]	; (8000ce0 <mode3_run+0x110>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <mode3_run+0x1c>
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d028      	beq.n	8000c3c <mode3_run+0x6c>
				toggleLeds(YELLOW);
				setTimer(5, 25);
			}
			break;
		default:
			break;
 8000bea:	e033      	b.n	8000c54 <mode3_run+0x84>
			HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 8000bec:	2200      	movs	r2, #0
 8000bee:	2110      	movs	r1, #16
 8000bf0:	483c      	ldr	r0, [pc, #240]	; (8000ce4 <mode3_run+0x114>)
 8000bf2:	f000 ff0a 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0) ;
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	483a      	ldr	r0, [pc, #232]	; (8000ce4 <mode3_run+0x114>)
 8000bfc:	f000 ff05 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0) ;
 8000c00:	2200      	movs	r2, #0
 8000c02:	2101      	movs	r1, #1
 8000c04:	4837      	ldr	r0, [pc, #220]	; (8000ce4 <mode3_run+0x114>)
 8000c06:	f000 ff00 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c10:	4835      	ldr	r0, [pc, #212]	; (8000ce8 <mode3_run+0x118>)
 8000c12:	f000 fefa 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0) ;
 8000c16:	2200      	movs	r2, #0
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4834      	ldr	r0, [pc, #208]	; (8000cec <mode3_run+0x11c>)
 8000c1c:	f000 fef5 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0) ;
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c26:	4830      	ldr	r0, [pc, #192]	; (8000ce8 <mode3_run+0x118>)
 8000c28:	f000 feef 	bl	8001a0a <HAL_GPIO_WritePin>
			mode3Toggle = TOGGLE;
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <mode3_run+0x110>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
			setTimer(5, 25);
 8000c32:	2119      	movs	r1, #25
 8000c34:	2005      	movs	r0, #5
 8000c36:	f000 faf9 	bl	800122c <setTimer>
			break;
 8000c3a:	e00b      	b.n	8000c54 <mode3_run+0x84>
			if(timer_flag[5] == 1){
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <mode3_run+0x120>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d106      	bne.n	8000c52 <mode3_run+0x82>
				toggleLeds(YELLOW);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f7ff fc17 	bl	8000478 <toggleLeds>
				setTimer(5, 25);
 8000c4a:	2119      	movs	r1, #25
 8000c4c:	2005      	movs	r0, #5
 8000c4e:	f000 faed 	bl	800122c <setTimer>
			break;
 8000c52:	bf00      	nop
	}

	switch(mode3Increase){
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <mode3_run+0x124>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <mode3_run+0x92>
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d014      	beq.n	8000c8a <mode3_run+0xba>
					setValues();
				}
				break;

			default:
				break;
 8000c60:	e039      	b.n	8000cd6 <mode3_run+0x106>
				if (isButtonPressed(1)==1){
 8000c62:	2001      	movs	r0, #1
 8000c64:	f7ff fa72 	bl	800014c <isButtonPressed>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d130      	bne.n	8000cd0 <mode3_run+0x100>
					mode3Increase = INCREASE;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <mode3_run+0x124>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
					yellowDelay +=1;
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <mode3_run+0x10c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <mode3_run+0x10c>)
 8000c7c:	6013      	str	r3, [r2, #0]
					redDelay +=1;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <mode3_run+0x128>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <mode3_run+0x128>)
 8000c86:	6013      	str	r3, [r2, #0]
				break;
 8000c88:	e022      	b.n	8000cd0 <mode3_run+0x100>
				if (isButtonPressed(1)==1){
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f7ff fa5e 	bl	800014c <isButtonPressed>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d110      	bne.n	8000cb8 <mode3_run+0xe8>
					yellowDelay +=1;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <mode3_run+0x10c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <mode3_run+0x10c>)
 8000c9e:	6013      	str	r3, [r2, #0]
					redDelay +=1;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <mode3_run+0x128>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <mode3_run+0x128>)
 8000ca8:	6013      	str	r3, [r2, #0]
					if(yellowDelay > 9) yellowDelay = 1;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <mode3_run+0x10c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b09      	cmp	r3, #9
 8000cb0:	dd02      	ble.n	8000cb8 <mode3_run+0xe8>
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <mode3_run+0x10c>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(2)==1){
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f7ff fa47 	bl	800014c <isButtonPressed>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d107      	bne.n	8000cd4 <mode3_run+0x104>
					MODE = MODE1;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <mode3_run+0x12c>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
					setValues();
 8000cca:	f000 f8ef 	bl	8000eac <setValues>
				break;
 8000cce:	e001      	b.n	8000cd4 <mode3_run+0x104>
				break;
 8000cd0:	bf00      	nop
 8000cd2:	e000      	b.n	8000cd6 <mode3_run+0x106>
				break;
 8000cd4:	bf00      	nop
		}
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000048 	.word	0x20000048
 8000ce0:	20000084 	.word	0x20000084
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	20000108 	.word	0x20000108
 8000cf4:	20000086 	.word	0x20000086
 8000cf8:	20000040 	.word	0x20000040
 8000cfc:	20000080 	.word	0x20000080

08000d00 <mode4_run>:

void mode4_run(){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	displaySEG7(greenDelay);
 8000d04:	4b41      	ldr	r3, [pc, #260]	; (8000e0c <mode4_run+0x10c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fbeb 	bl	80004e4 <displaySEG7>
	switch(mode4Toggle){
 8000d0e:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <mode4_run+0x110>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d002      	beq.n	8000d1c <mode4_run+0x1c>
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d028      	beq.n	8000d6c <mode4_run+0x6c>
				toggleLeds(GREEN);
				setTimer(7, 25);
			}
			break;
		default:
			break;
 8000d1a:	e033      	b.n	8000d84 <mode4_run+0x84>
			HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2110      	movs	r1, #16
 8000d20:	483c      	ldr	r0, [pc, #240]	; (8000e14 <mode4_run+0x114>)
 8000d22:	f000 fe72 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0) ;
 8000d26:	2200      	movs	r2, #0
 8000d28:	2102      	movs	r1, #2
 8000d2a:	483a      	ldr	r0, [pc, #232]	; (8000e14 <mode4_run+0x114>)
 8000d2c:	f000 fe6d 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0) ;
 8000d30:	2200      	movs	r2, #0
 8000d32:	2101      	movs	r1, #1
 8000d34:	4837      	ldr	r0, [pc, #220]	; (8000e14 <mode4_run+0x114>)
 8000d36:	f000 fe68 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d40:	4835      	ldr	r0, [pc, #212]	; (8000e18 <mode4_run+0x118>)
 8000d42:	f000 fe62 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0) ;
 8000d46:	2200      	movs	r2, #0
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4834      	ldr	r0, [pc, #208]	; (8000e1c <mode4_run+0x11c>)
 8000d4c:	f000 fe5d 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0) ;
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d56:	4830      	ldr	r0, [pc, #192]	; (8000e18 <mode4_run+0x118>)
 8000d58:	f000 fe57 	bl	8001a0a <HAL_GPIO_WritePin>
			mode4Toggle = TOGGLE;
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <mode4_run+0x110>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
			setTimer(7, 25);
 8000d62:	2119      	movs	r1, #25
 8000d64:	2007      	movs	r0, #7
 8000d66:	f000 fa61 	bl	800122c <setTimer>
			break;
 8000d6a:	e00b      	b.n	8000d84 <mode4_run+0x84>
			if(timer_flag[7] == 1){
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <mode4_run+0x120>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d106      	bne.n	8000d82 <mode4_run+0x82>
				toggleLeds(GREEN);
 8000d74:	2002      	movs	r0, #2
 8000d76:	f7ff fb7f 	bl	8000478 <toggleLeds>
				setTimer(7, 25);
 8000d7a:	2119      	movs	r1, #25
 8000d7c:	2007      	movs	r0, #7
 8000d7e:	f000 fa55 	bl	800122c <setTimer>
			break;
 8000d82:	bf00      	nop
	}

	switch(mode4Increase){
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <mode4_run+0x124>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <mode4_run+0x92>
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d014      	beq.n	8000dba <mode4_run+0xba>
					setValues();
				}
				break;

			default:
				break;
 8000d90:	e039      	b.n	8000e06 <mode4_run+0x106>
				if (isButtonPressed(1)==1){
 8000d92:	2001      	movs	r0, #1
 8000d94:	f7ff f9da 	bl	800014c <isButtonPressed>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d130      	bne.n	8000e00 <mode4_run+0x100>
					mode4Increase = INCREASE;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <mode4_run+0x124>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
					greenDelay +=1;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <mode4_run+0x10c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <mode4_run+0x10c>)
 8000dac:	6013      	str	r3, [r2, #0]
					redDelay +=1;
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <mode4_run+0x128>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <mode4_run+0x128>)
 8000db6:	6013      	str	r3, [r2, #0]
				break;
 8000db8:	e022      	b.n	8000e00 <mode4_run+0x100>
				if (isButtonPressed(1)==1){
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff f9c6 	bl	800014c <isButtonPressed>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d110      	bne.n	8000de8 <mode4_run+0xe8>
					greenDelay +=1;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <mode4_run+0x10c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <mode4_run+0x10c>)
 8000dce:	6013      	str	r3, [r2, #0]
					redDelay +=1;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <mode4_run+0x128>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <mode4_run+0x128>)
 8000dd8:	6013      	str	r3, [r2, #0]
					if(greenDelay > 9) greenDelay = 1;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <mode4_run+0x10c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b09      	cmp	r3, #9
 8000de0:	dd02      	ble.n	8000de8 <mode4_run+0xe8>
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <mode4_run+0x10c>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(2)==1){
 8000de8:	2002      	movs	r0, #2
 8000dea:	f7ff f9af 	bl	800014c <isButtonPressed>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d107      	bne.n	8000e04 <mode4_run+0x104>
					MODE = MODE1;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <mode4_run+0x12c>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
					setValues();
 8000dfa:	f000 f857 	bl	8000eac <setValues>
				break;
 8000dfe:	e001      	b.n	8000e04 <mode4_run+0x104>
				break;
 8000e00:	bf00      	nop
 8000e02:	e000      	b.n	8000e06 <mode4_run+0x106>
				break;
 8000e04:	bf00      	nop
		}
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000044 	.word	0x20000044
 8000e10:	20000087 	.word	0x20000087
 8000e14:	40010800 	.word	0x40010800
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	20000108 	.word	0x20000108
 8000e24:	20000089 	.word	0x20000089
 8000e28:	20000040 	.word	0x20000040
 8000e2c:	20000080 	.word	0x20000080

08000e30 <manual_run>:

void manual_run(){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	switch(MODE){
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <manual_run+0x78>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d01e      	beq.n	8000e7a <manual_run+0x4a>
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	dc2a      	bgt.n	8000e96 <manual_run+0x66>
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d002      	beq.n	8000e4a <manual_run+0x1a>
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d00c      	beq.n	8000e62 <manual_run+0x32>
				MODE = MODE1;
				setValues();
			}
			break;
		default:
			break;
 8000e48:	e025      	b.n	8000e96 <manual_run+0x66>
			mode2_run();
 8000e4a:	f7ff fe29 	bl	8000aa0 <mode2_run>
			if (isButtonPressed(0) == 1){
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff f97c 	bl	800014c <isButtonPressed>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d11f      	bne.n	8000e9a <manual_run+0x6a>
				MODE = MODE3;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <manual_run+0x78>)
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	701a      	strb	r2, [r3, #0]
			break;
 8000e60:	e01b      	b.n	8000e9a <manual_run+0x6a>
			mode3_run();
 8000e62:	f7ff feb5 	bl	8000bd0 <mode3_run>
			if (isButtonPressed(0) == 1){
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff f970 	bl	800014c <isButtonPressed>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d115      	bne.n	8000e9e <manual_run+0x6e>
				MODE = MODE4;
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <manual_run+0x78>)
 8000e74:	2204      	movs	r2, #4
 8000e76:	701a      	strb	r2, [r3, #0]
			break;
 8000e78:	e011      	b.n	8000e9e <manual_run+0x6e>
			mode4_run();
 8000e7a:	f7ff ff41 	bl	8000d00 <mode4_run>
			if (isButtonPressed(0) == 1){
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff f964 	bl	800014c <isButtonPressed>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d10b      	bne.n	8000ea2 <manual_run+0x72>
				MODE = MODE1;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <manual_run+0x78>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
				setValues();
 8000e90:	f000 f80c 	bl	8000eac <setValues>
			break;
 8000e94:	e005      	b.n	8000ea2 <manual_run+0x72>
			break;
 8000e96:	bf00      	nop
 8000e98:	e004      	b.n	8000ea4 <manual_run+0x74>
			break;
 8000e9a:	bf00      	nop
 8000e9c:	e002      	b.n	8000ea4 <manual_run+0x74>
			break;
 8000e9e:	bf00      	nop
 8000ea0:	e000      	b.n	8000ea4 <manual_run+0x74>
			break;
 8000ea2:	bf00      	nop
	}
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000080 	.word	0x20000080

08000eac <setValues>:


int countdownFirstCoupleLed;
int countdownSecondCoupleLed;

void setValues(void){
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	MODE = MODE1;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <setValues+0x6c>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]

	mode2Toggle = TOGGLE_INIT;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <setValues+0x70>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
	mode2Seg = SEG_INIT;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <setValues+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
	mode2Increase = INCREASE_INIT;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <setValues+0x78>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]

	mode3Toggle = TOGGLE_INIT;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <setValues+0x7c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
	mode3Seg = SEG_INIT;
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <setValues+0x80>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
	mode3Increase = INCREASE_INIT;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <setValues+0x84>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]

	mode4Toggle = TOGGLE_INIT;
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <setValues+0x88>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
	mode4Seg = SEG_INIT;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <setValues+0x8c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
	mode4Increase = INCREASE_INIT;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <setValues+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]

	firstCoupleLedAutoState = LED_INIT;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <setValues+0x94>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
	secondCoupleLedAutoState = LED_INIT;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <setValues+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
	seg7AutoState = SEG_INIT;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <setValues+0x9c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]

	countdownFirstCoupleLed = redDelay;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <setValues+0xa0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <setValues+0xa4>)
 8000f04:	6013      	str	r3, [r2, #0]
	countdownSecondCoupleLed = greenDelay;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <setValues+0xa8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <setValues+0xac>)
 8000f0c:	6013      	str	r3, [r2, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000080 	.word	0x20000080
 8000f1c:	20000081 	.word	0x20000081
 8000f20:	20000082 	.word	0x20000082
 8000f24:	20000083 	.word	0x20000083
 8000f28:	20000084 	.word	0x20000084
 8000f2c:	20000085 	.word	0x20000085
 8000f30:	20000086 	.word	0x20000086
 8000f34:	20000087 	.word	0x20000087
 8000f38:	20000088 	.word	0x20000088
 8000f3c:	20000089 	.word	0x20000089
 8000f40:	2000008a 	.word	0x2000008a
 8000f44:	2000008b 	.word	0x2000008b
 8000f48:	2000008c 	.word	0x2000008c
 8000f4c:	20000040 	.word	0x20000040
 8000f50:	20000090 	.word	0x20000090
 8000f54:	20000044 	.word	0x20000044
 8000f58:	20000094 	.word	0x20000094

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 fa48 	bl	80013f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f814 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 f89a 	bl	80010a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f6c:	f000 f84c 	bl	8001008 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f70:	4806      	ldr	r0, [pc, #24]	; (8000f8c <main+0x30>)
 8000f72:	f001 f9a9 	bl	80022c8 <HAL_TIM_Base_Start_IT>
  setValues();
 8000f76:	f7ff ff99 	bl	8000eac <setValues>
  displayFirstLedCouple(LED_INIT);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff f9ba 	bl	80002f4 <displayFirstLedCouple>
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //A3
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0); //I2C
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9-D10
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); //LED2
//	  HAL_Delay(1000);
	  auto_run();
 8000f80:	f7ff fc6a 	bl	8000858 <auto_run>
	  manual_run();
 8000f84:	f7ff ff54 	bl	8000e30 <manual_run>
	  auto_run();
 8000f88:	e7fa      	b.n	8000f80 <main+0x24>
 8000f8a:	bf00      	nop
 8000f8c:	20000098 	.word	0x20000098

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b090      	sub	sp, #64	; 0x40
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	2228      	movs	r2, #40	; 0x28
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fd40 	bl	8002a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fba:	2310      	movs	r3, #16
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc2:	f107 0318 	add.w	r3, r7, #24
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fd50 	bl	8001a6c <HAL_RCC_OscConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fd2:	f000 f926 	bl	8001222 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 ffbe 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ffa:	f000 f912 	bl	8001222 <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3740      	adds	r7, #64	; 0x40
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101c:	463b      	mov	r3, r7
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_TIM2_Init+0x94>)
 8001026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800102a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_TIM2_Init+0x94>)
 800102e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001032:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_TIM2_Init+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_TIM2_Init+0x94>)
 800103c:	220a      	movs	r2, #10
 800103e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_TIM2_Init+0x94>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_TIM2_Init+0x94>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800104c:	4813      	ldr	r0, [pc, #76]	; (800109c <MX_TIM2_Init+0x94>)
 800104e:	f001 f8eb 	bl	8002228 <HAL_TIM_Base_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001058:	f000 f8e3 	bl	8001222 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4619      	mov	r1, r3
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <MX_TIM2_Init+0x94>)
 800106a:	f001 fa87 	bl	800257c <HAL_TIM_ConfigClockSource>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001074:	f000 f8d5 	bl	8001222 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_TIM2_Init+0x94>)
 8001086:	f001 fc5d 	bl	8002944 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001090:	f000 f8c7 	bl	8001222 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000098 	.word	0x20000098

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b4:	4b44      	ldr	r3, [pc, #272]	; (80011c8 <MX_GPIO_Init+0x128>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a43      	ldr	r2, [pc, #268]	; (80011c8 <MX_GPIO_Init+0x128>)
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <MX_GPIO_Init+0x128>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0310 	and.w	r3, r3, #16
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <MX_GPIO_Init+0x128>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a3d      	ldr	r2, [pc, #244]	; (80011c8 <MX_GPIO_Init+0x128>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <MX_GPIO_Init+0x128>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e4:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <MX_GPIO_Init+0x128>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a37      	ldr	r2, [pc, #220]	; (80011c8 <MX_GPIO_Init+0x128>)
 80010ea:	f043 0308 	orr.w	r3, r3, #8
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <MX_GPIO_Init+0x128>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, YELLOW2_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2103      	movs	r1, #3
 8001100:	4832      	ldr	r0, [pc, #200]	; (80011cc <MX_GPIO_Init+0x12c>)
 8001102:	f000 fc82 	bl	8001a0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2113      	movs	r1, #19
 800110a:	4831      	ldr	r0, [pc, #196]	; (80011d0 <MX_GPIO_Init+0x130>)
 800110c:	f000 fc7d 	bl	8001a0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, B1_Pin|A1_Pin|LED0_Pin|LED11_Pin
 8001110:	2201      	movs	r2, #1
 8001112:	f240 71ec 	movw	r1, #2028	; 0x7ec
 8001116:	482e      	ldr	r0, [pc, #184]	; (80011d0 <MX_GPIO_Init+0x130>)
 8001118:	f000 fc77 	bl	8001a0a <HAL_GPIO_WritePin>
                          |LED10_Pin|F1_Pin|G1_Pin|C1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E1_Pin|D1_Pin|LED9_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8001122:	482c      	ldr	r0, [pc, #176]	; (80011d4 <MX_GPIO_Init+0x134>)
 8001124:	f000 fc71 	bl	8001a0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED2_Pin|GREEN2_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800112e:	4829      	ldr	r0, [pc, #164]	; (80011d4 <MX_GPIO_Init+0x134>)
 8001130:	f000 fc6b 	bl	8001a0a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON1_Pin;
 8001134:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113e:	2301      	movs	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	4619      	mov	r1, r3
 8001148:	4820      	ldr	r0, [pc, #128]	; (80011cc <MX_GPIO_Init+0x12c>)
 800114a:	f000 fac3 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : YELLOW2_Pin PC1 */
  GPIO_InitStruct.Pin = YELLOW2_Pin|GPIO_PIN_1;
 800114e:	2303      	movs	r3, #3
 8001150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2302      	movs	r3, #2
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	4619      	mov	r1, r3
 8001164:	4819      	ldr	r0, [pc, #100]	; (80011cc <MX_GPIO_Init+0x12c>)
 8001166:	f000 fab5 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin B1_Pin A1_Pin
                           GREEN1_Pin LED0_Pin LED11_Pin LED10_Pin
                           F1_Pin G1_Pin C1_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|B1_Pin|A1_Pin
 800116a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800116e:	613b      	str	r3, [r7, #16]
                          |GREEN1_Pin|LED0_Pin|LED11_Pin|LED10_Pin
                          |F1_Pin|G1_Pin|C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2302      	movs	r3, #2
 800117a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4619      	mov	r1, r3
 8001182:	4813      	ldr	r0, [pc, #76]	; (80011d0 <MX_GPIO_Init+0x130>)
 8001184:	f000 faa6 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8001188:	2301      	movs	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4619      	mov	r1, r3
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <MX_GPIO_Init+0x134>)
 800119c:	f000 fa9a 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : E1_Pin D1_Pin LED9_Pin RED2_Pin
                           GREEN2_Pin */
  GPIO_InitStruct.Pin = E1_Pin|D1_Pin|LED9_Pin|RED2_Pin
 80011a0:	f44f 63ec 	mov.w	r3, #1888	; 0x760
 80011a4:	613b      	str	r3, [r7, #16]
                          |GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	4806      	ldr	r0, [pc, #24]	; (80011d4 <MX_GPIO_Init+0x134>)
 80011ba:	f000 fa8b 	bl	80016d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40011000 	.word	0x40011000
 80011d0:	40010800 	.word	0x40010800
 80011d4:	40010c00 	.word	0x40010c00

080011d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	getKeyInput();
 80011e0:	f7fe ffde 	bl	80001a0 <getKeyInput>
	timerRun(0);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f000 f839 	bl	800125c <timerRun>
	timerRun(1);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 f836 	bl	800125c <timerRun>
	timerRun(2);
 80011f0:	2002      	movs	r0, #2
 80011f2:	f000 f833 	bl	800125c <timerRun>
	timerRun(3);
 80011f6:	2003      	movs	r0, #3
 80011f8:	f000 f830 	bl	800125c <timerRun>
	timerRun(4);
 80011fc:	2004      	movs	r0, #4
 80011fe:	f000 f82d 	bl	800125c <timerRun>
	timerRun(5);
 8001202:	2005      	movs	r0, #5
 8001204:	f000 f82a 	bl	800125c <timerRun>
	timerRun(6);
 8001208:	2006      	movs	r0, #6
 800120a:	f000 f827 	bl	800125c <timerRun>
	timerRun(7);
 800120e:	2007      	movs	r0, #7
 8001210:	f000 f824 	bl	800125c <timerRun>
	timerRun(8);
 8001214:	2008      	movs	r0, #8
 8001216:	f000 f821 	bl	800125c <timerRun>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001226:	b672      	cpsid	i
}
 8001228:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800122a:	e7fe      	b.n	800122a <Error_Handler+0x8>

0800122c <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int timer_ID, int duration){
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
	timer_counter[timer_ID] = duration;
 8001236:	4907      	ldr	r1, [pc, #28]	; (8001254 <setTimer+0x28>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer_ID] = 0;
 8001240:	4a05      	ldr	r2, [pc, #20]	; (8001258 <setTimer+0x2c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2100      	movs	r1, #0
 8001246:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	200000e0 	.word	0x200000e0
 8001258:	20000108 	.word	0x20000108

0800125c <timerRun>:
void timerRun(int timer_ID){
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	if(timer_counter[timer_ID] > 0){
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <timerRun+0x48>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126c:	2b00      	cmp	r3, #0
 800126e:	dd13      	ble.n	8001298 <timerRun+0x3c>
		timer_counter[timer_ID]--;
 8001270:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <timerRun+0x48>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	1e5a      	subs	r2, r3, #1
 800127a:	490a      	ldr	r1, [pc, #40]	; (80012a4 <timerRun+0x48>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[timer_ID] <= 0){
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <timerRun+0x48>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	2b00      	cmp	r3, #0
 800128c:	dc04      	bgt.n	8001298 <timerRun+0x3c>
			timer_flag[timer_ID] = 1;
 800128e:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <timerRun+0x4c>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2101      	movs	r1, #1
 8001294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200000e0 	.word	0x200000e0
 80012a8:	20000108 	.word	0x20000108

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_MspInit+0x40>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_MspInit+0x40>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_MspInit+0x40>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_MspInit+0x40>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_MspInit+0x40>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_MspInit+0x40>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001300:	d113      	bne.n	800132a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_TIM_Base_MspInit+0x44>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_TIM_Base_MspInit+0x44>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_TIM_Base_MspInit+0x44>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	201c      	movs	r0, #28
 8001320:	f000 f9a1 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001324:	201c      	movs	r0, #28
 8001326:	f000 f9ba 	bl	800169e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137e:	f000 f87f 	bl	8001480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <TIM2_IRQHandler+0x10>)
 800138e:	f000 ffed 	bl	800236c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000098 	.word	0x20000098

0800139c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a8:	f7ff fff8 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ae:	490c      	ldr	r1, [pc, #48]	; (80013e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013b0:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013c4:	4c09      	ldr	r4, [pc, #36]	; (80013ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f001 fb2f 	bl	8002a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013d6:	f7ff fdc1 	bl	8000f5c <main>
  bx lr
 80013da:	4770      	bx	lr
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80013e4:	08002ac0 	.word	0x08002ac0
  ldr r2, =_sbss
 80013e8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80013ec:	20000134 	.word	0x20000134

080013f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC1_2_IRQHandler>
	...

080013f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_Init+0x28>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_Init+0x28>)
 80013fe:	f043 0310 	orr.w	r3, r3, #16
 8001402:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 f923 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140a:	200f      	movs	r0, #15
 800140c:	f000 f808 	bl	8001420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001410:	f7ff ff4c 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40022000 	.word	0x40022000

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x54>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x58>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	fbb3 f3f1 	udiv	r3, r3, r1
 800143a:	fbb2 f3f3 	udiv	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f93b 	bl	80016ba <HAL_SYSTICK_Config>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e00e      	b.n	800146c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d80a      	bhi.n	800146a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001454:	2200      	movs	r2, #0
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f000 f903 	bl	8001666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001460:	4a06      	ldr	r2, [pc, #24]	; (800147c <HAL_InitTick+0x5c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000004c 	.word	0x2000004c
 8001478:	20000054 	.word	0x20000054
 800147c:	20000050 	.word	0x20000050

08001480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_IncTick+0x1c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_IncTick+0x20>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a03      	ldr	r2, [pc, #12]	; (80014a0 <HAL_IncTick+0x20>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	20000054 	.word	0x20000054
 80014a0:	20000130 	.word	0x20000130

080014a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b02      	ldr	r3, [pc, #8]	; (80014b4 <HAL_GetTick+0x10>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	20000130 	.word	0x20000130

080014b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	60d3      	str	r3, [r2, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db0b      	blt.n	8001546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	4906      	ldr	r1, [pc, #24]	; (8001550 <__NVIC_EnableIRQ+0x34>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100

08001554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db0a      	blt.n	800157e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	490c      	ldr	r1, [pc, #48]	; (80015a0 <__NVIC_SetPriority+0x4c>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	0112      	lsls	r2, r2, #4
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	440b      	add	r3, r1
 8001578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800157c:	e00a      	b.n	8001594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <__NVIC_SetPriority+0x50>)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	3b04      	subs	r3, #4
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	440b      	add	r3, r1
 8001592:	761a      	strb	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f1c3 0307 	rsb	r3, r3, #7
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf28      	it	cs
 80015c6:	2304      	movcs	r3, #4
 80015c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3304      	adds	r3, #4
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d902      	bls.n	80015d8 <NVIC_EncodePriority+0x30>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3b03      	subs	r3, #3
 80015d6:	e000      	b.n	80015da <NVIC_EncodePriority+0x32>
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43d9      	mvns	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	4313      	orrs	r3, r2
         );
}
 8001602:	4618      	mov	r0, r3
 8001604:	3724      	adds	r7, #36	; 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff90 	bl	8001554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff2d 	bl	80014b8 <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001678:	f7ff ff42 	bl	8001500 <__NVIC_GetPriorityGrouping>
 800167c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7ff ff90 	bl	80015a8 <NVIC_EncodePriority>
 8001688:	4602      	mov	r2, r0
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff5f 	bl	8001554 <__NVIC_SetPriority>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff35 	bl	800151c <__NVIC_EnableIRQ>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffa2 	bl	800160c <SysTick_Config>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b08b      	sub	sp, #44	; 0x2c
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e6:	e169      	b.n	80019bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016e8:	2201      	movs	r2, #1
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 8158 	bne.w	80019b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a9a      	ldr	r2, [pc, #616]	; (8001974 <HAL_GPIO_Init+0x2a0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d05e      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001710:	4a98      	ldr	r2, [pc, #608]	; (8001974 <HAL_GPIO_Init+0x2a0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d875      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 8001716:	4a98      	ldr	r2, [pc, #608]	; (8001978 <HAL_GPIO_Init+0x2a4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d058      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 800171c:	4a96      	ldr	r2, [pc, #600]	; (8001978 <HAL_GPIO_Init+0x2a4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d86f      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 8001722:	4a96      	ldr	r2, [pc, #600]	; (800197c <HAL_GPIO_Init+0x2a8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d052      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001728:	4a94      	ldr	r2, [pc, #592]	; (800197c <HAL_GPIO_Init+0x2a8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d869      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 800172e:	4a94      	ldr	r2, [pc, #592]	; (8001980 <HAL_GPIO_Init+0x2ac>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d04c      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001734:	4a92      	ldr	r2, [pc, #584]	; (8001980 <HAL_GPIO_Init+0x2ac>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d863      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 800173a:	4a92      	ldr	r2, [pc, #584]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d046      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001740:	4a90      	ldr	r2, [pc, #576]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d85d      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 8001746:	2b12      	cmp	r3, #18
 8001748:	d82a      	bhi.n	80017a0 <HAL_GPIO_Init+0xcc>
 800174a:	2b12      	cmp	r3, #18
 800174c:	d859      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <HAL_GPIO_Init+0x80>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	080017cf 	.word	0x080017cf
 8001758:	080017a9 	.word	0x080017a9
 800175c:	080017bb 	.word	0x080017bb
 8001760:	080017fd 	.word	0x080017fd
 8001764:	08001803 	.word	0x08001803
 8001768:	08001803 	.word	0x08001803
 800176c:	08001803 	.word	0x08001803
 8001770:	08001803 	.word	0x08001803
 8001774:	08001803 	.word	0x08001803
 8001778:	08001803 	.word	0x08001803
 800177c:	08001803 	.word	0x08001803
 8001780:	08001803 	.word	0x08001803
 8001784:	08001803 	.word	0x08001803
 8001788:	08001803 	.word	0x08001803
 800178c:	08001803 	.word	0x08001803
 8001790:	08001803 	.word	0x08001803
 8001794:	08001803 	.word	0x08001803
 8001798:	080017b1 	.word	0x080017b1
 800179c:	080017c5 	.word	0x080017c5
 80017a0:	4a79      	ldr	r2, [pc, #484]	; (8001988 <HAL_GPIO_Init+0x2b4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017a6:	e02c      	b.n	8001802 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e029      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	3304      	adds	r3, #4
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e024      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	3308      	adds	r3, #8
 80017c0:	623b      	str	r3, [r7, #32]
          break;
 80017c2:	e01f      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	330c      	adds	r3, #12
 80017ca:	623b      	str	r3, [r7, #32]
          break;
 80017cc:	e01a      	b.n	8001804 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017d6:	2304      	movs	r3, #4
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e013      	b.n	8001804 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e4:	2308      	movs	r3, #8
 80017e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	611a      	str	r2, [r3, #16]
          break;
 80017ee:	e009      	b.n	8001804 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	2308      	movs	r3, #8
 80017f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	615a      	str	r2, [r3, #20]
          break;
 80017fa:	e003      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x130>
          break;
 8001802:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2bff      	cmp	r3, #255	; 0xff
 8001808:	d801      	bhi.n	800180e <HAL_GPIO_Init+0x13a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	e001      	b.n	8001812 <HAL_GPIO_Init+0x13e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3304      	adds	r3, #4
 8001812:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2bff      	cmp	r3, #255	; 0xff
 8001818:	d802      	bhi.n	8001820 <HAL_GPIO_Init+0x14c>
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	e002      	b.n	8001826 <HAL_GPIO_Init+0x152>
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	3b08      	subs	r3, #8
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	210f      	movs	r1, #15
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	401a      	ands	r2, r3
 8001838:	6a39      	ldr	r1, [r7, #32]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	431a      	orrs	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80b1 	beq.w	80019b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001854:	4b4d      	ldr	r3, [pc, #308]	; (800198c <HAL_GPIO_Init+0x2b8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a4c      	ldr	r2, [pc, #304]	; (800198c <HAL_GPIO_Init+0x2b8>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b4a      	ldr	r3, [pc, #296]	; (800198c <HAL_GPIO_Init+0x2b8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800186c:	4a48      	ldr	r2, [pc, #288]	; (8001990 <HAL_GPIO_Init+0x2bc>)
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a40      	ldr	r2, [pc, #256]	; (8001994 <HAL_GPIO_Init+0x2c0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d013      	beq.n	80018c0 <HAL_GPIO_Init+0x1ec>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3f      	ldr	r2, [pc, #252]	; (8001998 <HAL_GPIO_Init+0x2c4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00d      	beq.n	80018bc <HAL_GPIO_Init+0x1e8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a3e      	ldr	r2, [pc, #248]	; (800199c <HAL_GPIO_Init+0x2c8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x1e4>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a3d      	ldr	r2, [pc, #244]	; (80019a0 <HAL_GPIO_Init+0x2cc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_GPIO_Init+0x1e0>
 80018b0:	2303      	movs	r3, #3
 80018b2:	e006      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018b4:	2304      	movs	r3, #4
 80018b6:	e004      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018c0:	2300      	movs	r3, #0
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	f002 0203 	and.w	r2, r2, #3
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	4093      	lsls	r3, r2
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018d2:	492f      	ldr	r1, [pc, #188]	; (8001990 <HAL_GPIO_Init+0x2bc>)
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018ec:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	492c      	ldr	r1, [pc, #176]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	4928      	ldr	r1, [pc, #160]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001904:	4013      	ands	r3, r2
 8001906:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	4922      	ldr	r1, [pc, #136]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	60cb      	str	r3, [r1, #12]
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	43db      	mvns	r3, r3
 800192a:	491e      	ldr	r1, [pc, #120]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800192c:	4013      	ands	r3, r2
 800192e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4918      	ldr	r1, [pc, #96]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	43db      	mvns	r3, r3
 8001952:	4914      	ldr	r1, [pc, #80]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001954:	4013      	ands	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d021      	beq.n	80019a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	600b      	str	r3, [r1, #0]
 8001970:	e021      	b.n	80019b6 <HAL_GPIO_Init+0x2e2>
 8001972:	bf00      	nop
 8001974:	10320000 	.word	0x10320000
 8001978:	10310000 	.word	0x10310000
 800197c:	10220000 	.word	0x10220000
 8001980:	10210000 	.word	0x10210000
 8001984:	10120000 	.word	0x10120000
 8001988:	10110000 	.word	0x10110000
 800198c:	40021000 	.word	0x40021000
 8001990:	40010000 	.word	0x40010000
 8001994:	40010800 	.word	0x40010800
 8001998:	40010c00 	.word	0x40010c00
 800199c:	40011000 	.word	0x40011000
 80019a0:	40011400 	.word	0x40011400
 80019a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_GPIO_Init+0x304>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	4909      	ldr	r1, [pc, #36]	; (80019d8 <HAL_GPIO_Init+0x304>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	3301      	adds	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	fa22 f303 	lsr.w	r3, r2, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f47f ae8e 	bne.w	80016e8 <HAL_GPIO_Init+0x14>
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	372c      	adds	r7, #44	; 0x2c
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40010400 	.word	0x40010400

080019dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	e001      	b.n	80019fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	460b      	mov	r3, r1
 8001a14:	807b      	strh	r3, [r7, #2]
 8001a16:	4613      	mov	r3, r2
 8001a18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a1a:	787b      	ldrb	r3, [r7, #1]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a26:	e003      	b.n	8001a30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	041a      	lsls	r2, r3, #16
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	611a      	str	r2, [r3, #16]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a4c:	887a      	ldrh	r2, [r7, #2]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	041a      	lsls	r2, r3, #16
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	400b      	ands	r3, r1
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	611a      	str	r2, [r3, #16]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e272      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8087 	beq.w	8001b9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a8c:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d00c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a98:	4b8f      	ldr	r3, [pc, #572]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d112      	bne.n	8001aca <HAL_RCC_OscConfig+0x5e>
 8001aa4:	4b8c      	ldr	r3, [pc, #560]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d10b      	bne.n	8001aca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab2:	4b89      	ldr	r3, [pc, #548]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d06c      	beq.n	8001b98 <HAL_RCC_OscConfig+0x12c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d168      	bne.n	8001b98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e24c      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x76>
 8001ad4:	4b80      	ldr	r3, [pc, #512]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a7f      	ldr	r2, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	e02e      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x98>
 8001aea:	4b7b      	ldr	r3, [pc, #492]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7a      	ldr	r2, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a77      	ldr	r2, [pc, #476]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e01d      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0xbc>
 8001b0e:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a71      	ldr	r2, [pc, #452]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6e      	ldr	r2, [pc, #440]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001b28:	4b6b      	ldr	r3, [pc, #428]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a6a      	ldr	r2, [pc, #424]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a67      	ldr	r2, [pc, #412]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d013      	beq.n	8001b70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fcac 	bl	80014a4 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fca8 	bl	80014a4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e200      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0xe4>
 8001b6e:	e014      	b.n	8001b9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fc98 	bl	80014a4 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff fc94 	bl	80014a4 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1ec      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x10c>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d063      	beq.n	8001c6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba6:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d11c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x18c>
 8001bbe:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d116      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_RCC_OscConfig+0x176>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e1c0      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4939      	ldr	r1, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	e03a      	b.n	8001c6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d020      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fc4d 	bl	80014a4 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fc49 	bl	80014a4 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e1a1      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4927      	ldr	r1, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
 8001c40:	e015      	b.n	8001c6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fc2c 	bl	80014a4 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c50:	f7ff fc28 	bl	80014a4 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e180      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03a      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d019      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7ff fc0c 	bl	80014a4 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c90:	f7ff fc08 	bl	80014a4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e160      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f000 fa9c 	bl	80021ec <RCC_Delay>
 8001cb4:	e01c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fbf2 	bl	80014a4 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc2:	e00f      	b.n	8001ce4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff fbee 	bl	80014a4 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d908      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e146      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	42420000 	.word	0x42420000
 8001ce0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e9      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a6 	beq.w	8001e4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d02:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a87      	ldr	r2, [pc, #540]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b85      	ldr	r3, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	4b82      	ldr	r3, [pc, #520]	; (8001f34 <HAL_RCC_OscConfig+0x4c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d118      	bne.n	8001d68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d36:	4b7f      	ldr	r3, [pc, #508]	; (8001f34 <HAL_RCC_OscConfig+0x4c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7e      	ldr	r2, [pc, #504]	; (8001f34 <HAL_RCC_OscConfig+0x4c8>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fbaf 	bl	80014a4 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7ff fbab 	bl	80014a4 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b64      	cmp	r3, #100	; 0x64
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e103      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	4b75      	ldr	r3, [pc, #468]	; (8001f34 <HAL_RCC_OscConfig+0x4c8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x312>
 8001d70:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6213      	str	r3, [r2, #32]
 8001d7c:	e02d      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x334>
 8001d86:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a69      	ldr	r2, [pc, #420]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a66      	ldr	r2, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	e01c      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x356>
 8001da8:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a60      	ldr	r2, [pc, #384]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	4b5e      	ldr	r3, [pc, #376]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a5d      	ldr	r2, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e00b      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a5a      	ldr	r2, [pc, #360]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6213      	str	r3, [r2, #32]
 8001dce:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a57      	ldr	r2, [pc, #348]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d015      	beq.n	8001e0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7ff fb5f 	bl	80014a4 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff fb5b 	bl	80014a4 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0b1      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ee      	beq.n	8001dea <HAL_RCC_OscConfig+0x37e>
 8001e0c:	e014      	b.n	8001e38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fb49 	bl	80014a4 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff fb45 	bl	80014a4 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e09b      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ee      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d105      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a3b      	ldr	r2, [pc, #236]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8087 	beq.w	8001f62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d061      	beq.n	8001f24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d146      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	4b33      	ldr	r3, [pc, #204]	; (8001f38 <HAL_RCC_OscConfig+0x4cc>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fb19 	bl	80014a4 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7ff fb15 	bl	80014a4 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e06d      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e88:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d108      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	4921      	ldr	r1, [pc, #132]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a19      	ldr	r1, [r3, #32]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	491b      	ldr	r1, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x4cc>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fae9 	bl	80014a4 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7ff fae5 	bl	80014a4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e03d      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x46a>
 8001ef4:	e035      	b.n	8001f62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_RCC_OscConfig+0x4cc>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fad2 	bl	80014a4 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff face 	bl	80014a4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e026      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x498>
 8001f22:	e01e      	b.n	8001f62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e019      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40007000 	.word	0x40007000
 8001f38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_OscConfig+0x500>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000

08001f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0d0      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d910      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b67      	ldr	r3, [pc, #412]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4965      	ldr	r1, [pc, #404]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b8      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fcc:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff0:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	494d      	ldr	r1, [pc, #308]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d040      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d115      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e07f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e073      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06b      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4936      	ldr	r1, [pc, #216]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7ff fa20 	bl	80014a4 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7ff fa1c 	bl	80014a4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e053      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d210      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4922      	ldr	r1, [pc, #136]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e032      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4916      	ldr	r1, [pc, #88]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020fe:	f000 f821 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8002102:	4602      	mov	r2, r0
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	490a      	ldr	r1, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002110:	5ccb      	ldrb	r3, [r1, r3]
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1cc>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1d0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff f97e 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40022000 	.word	0x40022000
 8002134:	40021000 	.word	0x40021000
 8002138:	08002a94 	.word	0x08002a94
 800213c:	2000004c 	.word	0x2000004c
 8002140:	20000050 	.word	0x20000050

08002144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b04      	cmp	r3, #4
 800216c:	d002      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x30>
 800216e:	2b08      	cmp	r3, #8
 8002170:	d003      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0x36>
 8002172:	e027      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002176:	613b      	str	r3, [r7, #16]
      break;
 8002178:	e027      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	0c9b      	lsrs	r3, r3, #18
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002184:	5cd3      	ldrb	r3, [r2, r3]
 8002186:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d010      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	0c5b      	lsrs	r3, r3, #17
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <HAL_RCC_GetSysClockFreq+0x98>)
 80021a6:	fb03 f202 	mul.w	r2, r3, r2
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e004      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021b8:	fb02 f303 	mul.w	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	613b      	str	r3, [r7, #16]
      break;
 80021c2:	e002      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCC_GetSysClockFreq+0x98>)
 80021c6:	613b      	str	r3, [r7, #16]
      break;
 80021c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ca:	693b      	ldr	r3, [r7, #16]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	007a1200 	.word	0x007a1200
 80021e0:	08002aa4 	.word	0x08002aa4
 80021e4:	08002ab4 	.word	0x08002ab4
 80021e8:	003d0900 	.word	0x003d0900

080021ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <RCC_Delay+0x34>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <RCC_Delay+0x38>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0a5b      	lsrs	r3, r3, #9
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002208:	bf00      	nop
  }
  while (Delay --);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	60fa      	str	r2, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f9      	bne.n	8002208 <RCC_Delay+0x1c>
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	2000004c 	.word	0x2000004c
 8002224:	10624dd3 	.word	0x10624dd3

08002228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e041      	b.n	80022be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff f84e 	bl	80012f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f000 fa74 	bl	8002754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d001      	beq.n	80022e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e03a      	b.n	8002356 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a18      	ldr	r2, [pc, #96]	; (8002360 <HAL_TIM_Base_Start_IT+0x98>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00e      	beq.n	8002320 <HAL_TIM_Base_Start_IT+0x58>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d009      	beq.n	8002320 <HAL_TIM_Base_Start_IT+0x58>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <HAL_TIM_Base_Start_IT+0x9c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d004      	beq.n	8002320 <HAL_TIM_Base_Start_IT+0x58>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <HAL_TIM_Base_Start_IT+0xa0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d111      	bne.n	8002344 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b06      	cmp	r3, #6
 8002330:	d010      	beq.n	8002354 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0201 	orr.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002342:	e007      	b.n	8002354 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40000400 	.word	0x40000400
 8002368:	40000800 	.word	0x40000800

0800236c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b02      	cmp	r3, #2
 8002380:	d122      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b02      	cmp	r3, #2
 800238e:	d11b      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0202 	mvn.w	r2, #2
 8002398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f9b4 	bl	800271c <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f9a7 	bl	800270a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f9b6 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d122      	bne.n	800241c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d11b      	bne.n	800241c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0204 	mvn.w	r2, #4
 80023ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2202      	movs	r2, #2
 80023f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f98a 	bl	800271c <HAL_TIM_IC_CaptureCallback>
 8002408:	e005      	b.n	8002416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f97d 	bl	800270a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f98c 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b08      	cmp	r3, #8
 8002428:	d122      	bne.n	8002470 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b08      	cmp	r3, #8
 8002436:	d11b      	bne.n	8002470 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0208 	mvn.w	r2, #8
 8002440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2204      	movs	r2, #4
 8002446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f960 	bl	800271c <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f953 	bl	800270a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f962 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b10      	cmp	r3, #16
 800247c:	d122      	bne.n	80024c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b10      	cmp	r3, #16
 800248a:	d11b      	bne.n	80024c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0210 	mvn.w	r2, #16
 8002494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2208      	movs	r2, #8
 800249a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f936 	bl	800271c <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f929 	bl	800270a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f938 	bl	800272e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d10e      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d107      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0201 	mvn.w	r2, #1
 80024e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fe74 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fa:	2b80      	cmp	r3, #128	; 0x80
 80024fc:	d10e      	bne.n	800251c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002508:	2b80      	cmp	r3, #128	; 0x80
 800250a:	d107      	bne.n	800251c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fa7b 	bl	8002a12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b40      	cmp	r3, #64	; 0x40
 8002528:	d10e      	bne.n	8002548 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d107      	bne.n	8002548 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f8fc 	bl	8002740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b20      	cmp	r3, #32
 8002554:	d10e      	bne.n	8002574 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b20      	cmp	r3, #32
 8002562:	d107      	bne.n	8002574 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0220 	mvn.w	r2, #32
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fa46 	bl	8002a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_TIM_ConfigClockSource+0x1c>
 8002594:	2302      	movs	r3, #2
 8002596:	e0b4      	b.n	8002702 <HAL_TIM_ConfigClockSource+0x186>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d0:	d03e      	beq.n	8002650 <HAL_TIM_ConfigClockSource+0xd4>
 80025d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d6:	f200 8087 	bhi.w	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025de:	f000 8086 	beq.w	80026ee <HAL_TIM_ConfigClockSource+0x172>
 80025e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e6:	d87f      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b70      	cmp	r3, #112	; 0x70
 80025ea:	d01a      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0xa6>
 80025ec:	2b70      	cmp	r3, #112	; 0x70
 80025ee:	d87b      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b60      	cmp	r3, #96	; 0x60
 80025f2:	d050      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x11a>
 80025f4:	2b60      	cmp	r3, #96	; 0x60
 80025f6:	d877      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f8:	2b50      	cmp	r3, #80	; 0x50
 80025fa:	d03c      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0xfa>
 80025fc:	2b50      	cmp	r3, #80	; 0x50
 80025fe:	d873      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	d058      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d86f      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	2b30      	cmp	r3, #48	; 0x30
 800260a:	d064      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x15a>
 800260c:	2b30      	cmp	r3, #48	; 0x30
 800260e:	d86b      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002610:	2b20      	cmp	r3, #32
 8002612:	d060      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002614:	2b20      	cmp	r3, #32
 8002616:	d867      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d05c      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x15a>
 800261c:	2b10      	cmp	r3, #16
 800261e:	d05a      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002620:	e062      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002632:	f000 f968 	bl	8002906 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	609a      	str	r2, [r3, #8]
      break;
 800264e:	e04f      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002660:	f000 f951 	bl	8002906 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002672:	609a      	str	r2, [r3, #8]
      break;
 8002674:	e03c      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002682:	461a      	mov	r2, r3
 8002684:	f000 f8c8 	bl	8002818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2150      	movs	r1, #80	; 0x50
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f91f 	bl	80028d2 <TIM_ITRx_SetConfig>
      break;
 8002694:	e02c      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026a2:	461a      	mov	r2, r3
 80026a4:	f000 f8e6 	bl	8002874 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2160      	movs	r1, #96	; 0x60
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f90f 	bl	80028d2 <TIM_ITRx_SetConfig>
      break;
 80026b4:	e01c      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c2:	461a      	mov	r2, r3
 80026c4:	f000 f8a8 	bl	8002818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f8ff 	bl	80028d2 <TIM_ITRx_SetConfig>
      break;
 80026d4:	e00c      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f000 f8f6 	bl	80028d2 <TIM_ITRx_SetConfig>
      break;
 80026e6:	e003      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
      break;
 80026ec:	e000      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
	...

08002754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a29      	ldr	r2, [pc, #164]	; (800280c <TIM_Base_SetConfig+0xb8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00b      	beq.n	8002784 <TIM_Base_SetConfig+0x30>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002772:	d007      	beq.n	8002784 <TIM_Base_SetConfig+0x30>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a26      	ldr	r2, [pc, #152]	; (8002810 <TIM_Base_SetConfig+0xbc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d003      	beq.n	8002784 <TIM_Base_SetConfig+0x30>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a25      	ldr	r2, [pc, #148]	; (8002814 <TIM_Base_SetConfig+0xc0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d108      	bne.n	8002796 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a1c      	ldr	r2, [pc, #112]	; (800280c <TIM_Base_SetConfig+0xb8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00b      	beq.n	80027b6 <TIM_Base_SetConfig+0x62>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a4:	d007      	beq.n	80027b6 <TIM_Base_SetConfig+0x62>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a19      	ldr	r2, [pc, #100]	; (8002810 <TIM_Base_SetConfig+0xbc>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d003      	beq.n	80027b6 <TIM_Base_SetConfig+0x62>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a18      	ldr	r2, [pc, #96]	; (8002814 <TIM_Base_SetConfig+0xc0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d108      	bne.n	80027c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a07      	ldr	r2, [pc, #28]	; (800280c <TIM_Base_SetConfig+0xb8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d103      	bne.n	80027fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	615a      	str	r2, [r3, #20]
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	40012c00 	.word	0x40012c00
 8002810:	40000400 	.word	0x40000400
 8002814:	40000800 	.word	0x40000800

08002818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f023 0201 	bic.w	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f023 030a 	bic.w	r3, r3, #10
 8002854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
 800285c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	621a      	str	r2, [r3, #32]
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	f023 0210 	bic.w	r2, r3, #16
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800289e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	031b      	lsls	r3, r3, #12
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	621a      	str	r2, [r3, #32]
}
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f043 0307 	orr.w	r3, r3, #7
 80028f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	609a      	str	r2, [r3, #8]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002906:	b480      	push	{r7}
 8002908:	b087      	sub	sp, #28
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002920:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	021a      	lsls	r2, r3, #8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	431a      	orrs	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4313      	orrs	r3, r2
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4313      	orrs	r3, r2
 8002932:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	609a      	str	r2, [r3, #8]
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002958:	2302      	movs	r3, #2
 800295a:	e046      	b.n	80029ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00e      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a8:	d009      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d004      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a10      	ldr	r2, [pc, #64]	; (80029fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d10c      	bne.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	40012c00 	.word	0x40012c00
 80029f8:	40000400 	.word	0x40000400
 80029fc:	40000800 	.word	0x40000800

08002a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <memset>:
 8002a24:	4603      	mov	r3, r0
 8002a26:	4402      	add	r2, r0
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <memset+0xa>
 8002a2c:	4770      	bx	lr
 8002a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a32:	e7f9      	b.n	8002a28 <memset+0x4>

08002a34 <__libc_init_array>:
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	2600      	movs	r6, #0
 8002a38:	4d0c      	ldr	r5, [pc, #48]	; (8002a6c <__libc_init_array+0x38>)
 8002a3a:	4c0d      	ldr	r4, [pc, #52]	; (8002a70 <__libc_init_array+0x3c>)
 8002a3c:	1b64      	subs	r4, r4, r5
 8002a3e:	10a4      	asrs	r4, r4, #2
 8002a40:	42a6      	cmp	r6, r4
 8002a42:	d109      	bne.n	8002a58 <__libc_init_array+0x24>
 8002a44:	f000 f81a 	bl	8002a7c <_init>
 8002a48:	2600      	movs	r6, #0
 8002a4a:	4d0a      	ldr	r5, [pc, #40]	; (8002a74 <__libc_init_array+0x40>)
 8002a4c:	4c0a      	ldr	r4, [pc, #40]	; (8002a78 <__libc_init_array+0x44>)
 8002a4e:	1b64      	subs	r4, r4, r5
 8002a50:	10a4      	asrs	r4, r4, #2
 8002a52:	42a6      	cmp	r6, r4
 8002a54:	d105      	bne.n	8002a62 <__libc_init_array+0x2e>
 8002a56:	bd70      	pop	{r4, r5, r6, pc}
 8002a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5c:	4798      	blx	r3
 8002a5e:	3601      	adds	r6, #1
 8002a60:	e7ee      	b.n	8002a40 <__libc_init_array+0xc>
 8002a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a66:	4798      	blx	r3
 8002a68:	3601      	adds	r6, #1
 8002a6a:	e7f2      	b.n	8002a52 <__libc_init_array+0x1e>
 8002a6c:	08002ab8 	.word	0x08002ab8
 8002a70:	08002ab8 	.word	0x08002ab8
 8002a74:	08002ab8 	.word	0x08002ab8
 8002a78:	08002abc 	.word	0x08002abc

08002a7c <_init>:
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	bf00      	nop
 8002a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a82:	bc08      	pop	{r3}
 8002a84:	469e      	mov	lr, r3
 8002a86:	4770      	bx	lr

08002a88 <_fini>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	bf00      	nop
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr
